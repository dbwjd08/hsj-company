/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useYuppieContext, YuppieContext } from './yuppieContext';
import type * as Fetcher from './yuppieFetcher';
import { yuppieFetch } from './yuppieFetcher';
import type * as Schemas from './yuppieSchemas';

export type RefreshSessionAuthRefreshSessionPostError =
  Fetcher.ErrorWrapper<undefined>;

export type RefreshSessionAuthRefreshSessionPostVariables =
  YuppieContext['fetcherOptions'];

export const fetchRefreshSessionAuthRefreshSessionPost = (
  variables: RefreshSessionAuthRefreshSessionPostVariables,
) =>
  yuppieFetch<
    Schemas.LoginResponse,
    RefreshSessionAuthRefreshSessionPostError,
    undefined,
    {},
    {},
    {}
  >({ url: '/auth/refresh_session', method: 'post', ...variables });

export const useRefreshSessionAuthRefreshSessionPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponse,
      RefreshSessionAuthRefreshSessionPostError,
      RefreshSessionAuthRefreshSessionPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.LoginResponse,
    RefreshSessionAuthRefreshSessionPostError,
    RefreshSessionAuthRefreshSessionPostVariables
  >(
    (variables: RefreshSessionAuthRefreshSessionPostVariables) =>
      fetchRefreshSessionAuthRefreshSessionPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type LoginFirebaseAuthFirebaseLoginPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginFirebaseAuthFirebaseLoginPostVariables = {
  body: Schemas.FirebaseLoginRequest;
} & YuppieContext['fetcherOptions'];

export const fetchLoginFirebaseAuthFirebaseLoginPost = (
  variables: LoginFirebaseAuthFirebaseLoginPostVariables,
) =>
  yuppieFetch<
    Schemas.LoginResponse,
    LoginFirebaseAuthFirebaseLoginPostError,
    Schemas.FirebaseLoginRequest,
    {},
    {},
    {}
  >({ url: '/auth/firebase/login', method: 'post', ...variables });

export const useLoginFirebaseAuthFirebaseLoginPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponse,
      LoginFirebaseAuthFirebaseLoginPostError,
      LoginFirebaseAuthFirebaseLoginPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.LoginResponse,
    LoginFirebaseAuthFirebaseLoginPostError,
    LoginFirebaseAuthFirebaseLoginPostVariables
  >(
    (variables: LoginFirebaseAuthFirebaseLoginPostVariables) =>
      fetchLoginFirebaseAuthFirebaseLoginPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type LoginKakaoAuthKakaoLoginPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginKakaoAuthKakaoLoginPostVariables = {
  body: Schemas.KakaoLoginRequest;
} & YuppieContext['fetcherOptions'];

export const fetchLoginKakaoAuthKakaoLoginPost = (
  variables: LoginKakaoAuthKakaoLoginPostVariables,
) =>
  yuppieFetch<
    Schemas.LoginResponse,
    LoginKakaoAuthKakaoLoginPostError,
    Schemas.KakaoLoginRequest,
    {},
    {},
    {}
  >({ url: '/auth/kakao/login', method: 'post', ...variables });

export const useLoginKakaoAuthKakaoLoginPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponse,
      LoginKakaoAuthKakaoLoginPostError,
      LoginKakaoAuthKakaoLoginPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.LoginResponse,
    LoginKakaoAuthKakaoLoginPostError,
    LoginKakaoAuthKakaoLoginPostVariables
  >(
    (variables: LoginKakaoAuthKakaoLoginPostVariables) =>
      fetchLoginKakaoAuthKakaoLoginPost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type SignInWithGoogleAuthGoogleSignInPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type SignInWithGoogleAuthGoogleSignInPostVariables = {
  body: Schemas.GoogleSignInRequest;
} & YuppieContext['fetcherOptions'];

export const fetchSignInWithGoogleAuthGoogleSignInPost = (
  variables: SignInWithGoogleAuthGoogleSignInPostVariables,
) =>
  yuppieFetch<
    Schemas.LoginResponse,
    SignInWithGoogleAuthGoogleSignInPostError,
    Schemas.GoogleSignInRequest,
    {},
    {},
    {}
  >({ url: '/auth/google/sign-in', method: 'post', ...variables });

export const useSignInWithGoogleAuthGoogleSignInPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponse,
      SignInWithGoogleAuthGoogleSignInPostError,
      SignInWithGoogleAuthGoogleSignInPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.LoginResponse,
    SignInWithGoogleAuthGoogleSignInPostError,
    SignInWithGoogleAuthGoogleSignInPostVariables
  >(
    (variables: SignInWithGoogleAuthGoogleSignInPostVariables) =>
      fetchSignInWithGoogleAuthGoogleSignInPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type SignInWithAppleAuthAppleSignInPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type SignInWithAppleAuthAppleSignInPostVariables = {
  body: Schemas.AppleSignInRequest;
} & YuppieContext['fetcherOptions'];

export const fetchSignInWithAppleAuthAppleSignInPost = (
  variables: SignInWithAppleAuthAppleSignInPostVariables,
) =>
  yuppieFetch<
    Schemas.LoginResponse,
    SignInWithAppleAuthAppleSignInPostError,
    Schemas.AppleSignInRequest,
    {},
    {},
    {}
  >({ url: '/auth/apple/sign-in', method: 'post', ...variables });

export const useSignInWithAppleAuthAppleSignInPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponse,
      SignInWithAppleAuthAppleSignInPostError,
      SignInWithAppleAuthAppleSignInPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.LoginResponse,
    SignInWithAppleAuthAppleSignInPostError,
    SignInWithAppleAuthAppleSignInPostVariables
  >(
    (variables: SignInWithAppleAuthAppleSignInPostVariables) =>
      fetchSignInWithAppleAuthAppleSignInPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CallbackForSignInWithAppleAuthAppleCallbackPostError =
  Fetcher.ErrorWrapper<undefined>;

export type CallbackForSignInWithAppleAuthAppleCallbackPostVariables =
  YuppieContext['fetcherOptions'];

export const fetchCallbackForSignInWithAppleAuthAppleCallbackPost = (
  variables: CallbackForSignInWithAppleAuthAppleCallbackPostVariables,
) =>
  yuppieFetch<
    void,
    CallbackForSignInWithAppleAuthAppleCallbackPostError,
    undefined,
    {},
    {},
    {}
  >({ url: '/auth/apple/callback', method: 'post', ...variables });

export const useCallbackForSignInWithAppleAuthAppleCallbackPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CallbackForSignInWithAppleAuthAppleCallbackPostError,
      CallbackForSignInWithAppleAuthAppleCallbackPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CallbackForSignInWithAppleAuthAppleCallbackPostError,
    CallbackForSignInWithAppleAuthAppleCallbackPostVariables
  >(
    (variables: CallbackForSignInWithAppleAuthAppleCallbackPostVariables) =>
      fetchCallbackForSignInWithAppleAuthAppleCallbackPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type LoginMockupAuthDocsSignInPostQueryParams = {
  username: string;
  pwd: string;
};

export type LoginMockupAuthDocsSignInPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginMockupAuthDocsSignInPostVariables = {
  queryParams: LoginMockupAuthDocsSignInPostQueryParams;
} & YuppieContext['fetcherOptions'];

export const fetchLoginMockupAuthDocsSignInPost = (
  variables: LoginMockupAuthDocsSignInPostVariables,
) =>
  yuppieFetch<
    Schemas.LoginResponse,
    LoginMockupAuthDocsSignInPostError,
    undefined,
    {},
    LoginMockupAuthDocsSignInPostQueryParams,
    {}
  >({ url: '/auth/docs/sign-in', method: 'post', ...variables });

export const useLoginMockupAuthDocsSignInPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponse,
      LoginMockupAuthDocsSignInPostError,
      LoginMockupAuthDocsSignInPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.LoginResponse,
    LoginMockupAuthDocsSignInPostError,
    LoginMockupAuthDocsSignInPostVariables
  >(
    (variables: LoginMockupAuthDocsSignInPostVariables) =>
      fetchLoginMockupAuthDocsSignInPost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostVariables =
  {
    body: Schemas.ServerSchemasRequestsCalculateKrPropertyAcquisitionTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePost = (
  variables: CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostVariables,
) =>
  yuppieFetch<
    void,
    CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostError,
    Schemas.ServerSchemasRequestsCalculateKrPropertyAcquisitionTaxRequest,
    {},
    {},
    {}
  >({ url: '/mvp/kr/acquisition_tax/calculate', method: 'post', ...variables });

export const useCalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostError,
      CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostError,
    CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostVariables
  >(
    (
      variables: CalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePostVariables,
    ) =>
      fetchCalculateKrAcquisitionTaxMvpKrAcquisitionTaxCalculatePost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostVariables = {
  body: Schemas.ServerSchemasRequestsCalculateKrTaxRequest;
} & YuppieContext['fetcherOptions'];

export const fetchCalculateKrPropertyTaxMvpKrPropertyTaxCalculatePost = (
  variables: CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostVariables,
) =>
  yuppieFetch<
    void,
    CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostError,
    Schemas.ServerSchemasRequestsCalculateKrTaxRequest,
    {},
    {},
    {}
  >({ url: '/mvp/kr/property_tax/calculate', method: 'post', ...variables });

export const useCalculateKrPropertyTaxMvpKrPropertyTaxCalculatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostError,
      CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostError,
    CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostVariables
  >(
    (variables: CalculateKrPropertyTaxMvpKrPropertyTaxCalculatePostVariables) =>
      fetchCalculateKrPropertyTaxMvpKrPropertyTaxCalculatePost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CalculateKrCretMvpKrCretCalculatePostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type CalculateKrCretMvpKrCretCalculatePostVariables = {
  body: Schemas.ServerSchemasRequestsCalculateKrTaxRequest;
} & YuppieContext['fetcherOptions'];

export const fetchCalculateKrCretMvpKrCretCalculatePost = (
  variables: CalculateKrCretMvpKrCretCalculatePostVariables,
) =>
  yuppieFetch<
    void,
    CalculateKrCretMvpKrCretCalculatePostError,
    Schemas.ServerSchemasRequestsCalculateKrTaxRequest,
    {},
    {},
    {}
  >({ url: '/mvp/kr/cret/calculate', method: 'post', ...variables });

export const useCalculateKrCretMvpKrCretCalculatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CalculateKrCretMvpKrCretCalculatePostError,
      CalculateKrCretMvpKrCretCalculatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CalculateKrCretMvpKrCretCalculatePostError,
    CalculateKrCretMvpKrCretCalculatePostVariables
  >(
    (variables: CalculateKrCretMvpKrCretCalculatePostVariables) =>
      fetchCalculateKrCretMvpKrCretCalculatePost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostVariables =
  {
    body: Schemas.ServerSchemasRequestsCalculateKrTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPost =
  (
    variables: CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostVariables,
  ) =>
    yuppieFetch<
      void,
      CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostError,
      Schemas.ServerSchemasRequestsCalculateKrTaxRequest,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/tax_for_real_estate/maintenance/history',
      method: 'post',
      ...variables,
    });

export const useCalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostError,
        CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostError,
      CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostVariables
    >(
      (
        variables: CalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPostVariables,
      ) =>
        fetchCalculateKrMaintenanceTaxHistoryMvpKrTaxForRealEstateMaintenanceHistoryPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables =
  {
    body: Schemas.ServerSchemasRequestsInferFutureKrTaxMaintenanceRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchInferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePost =
  (
    variables: InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables,
  ) =>
    yuppieFetch<
      void,
      InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostError,
      Schemas.ServerSchemasRequestsInferFutureKrTaxMaintenanceRequest,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/tax_for_real_estate/maintenance/infer_future',
      method: 'post',
      ...variables,
    });

export const useInferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostError,
        InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostError,
      InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables
    >(
      (
        variables: InferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables,
      ) =>
        fetchInferFutureKrTaxRealEstateMaintenanceMvpKrTaxForRealEstateMaintenanceInferFuturePost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables =
  {
    body: Schemas.ServerSchemasRequestsCalculateKrTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePost =
  (
    variables: CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables,
  ) =>
    yuppieFetch<
      void,
      CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError,
      Schemas.ServerSchemasRequestsCalculateKrTaxRequest,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/tax_for_real_estate/maintenance/history_and_inference',
      method: 'post',
      ...variables,
    });

export const useCalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError,
        CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError,
      CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables
    >(
      (
        variables: CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables,
      ) =>
        fetchCalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables =
  {
    body: Schemas.ServerSchemasRequestsCapitalGainsTaxRequestForDefault;
  } & YuppieContext['fetcherOptions'];

export const fetchInferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPost =
  (
    variables: InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables,
  ) =>
    yuppieFetch<
      void,
      InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError,
      Schemas.ServerSchemasRequestsCapitalGainsTaxRequestForDefault,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/capital_gains_tax/house/infer_future_default',
      method: 'post',
      ...variables,
    });

export const useInferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError,
        InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError,
      InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables
    >(
      (
        variables: InferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables,
      ) =>
        fetchInferFutureKrCapitalGainsTaxDefaultMvpKrCapitalGainsTaxHouseInferFutureDefaultPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables =
  {
    body: Schemas.ServerSchemasRequestsAnalyzePropertyCapitalGainsTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchAnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPost =
  (
    variables: AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables,
  ) =>
    yuppieFetch<
      void,
      AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError,
      Schemas.ServerSchemasRequestsAnalyzePropertyCapitalGainsTaxRequest,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/capital_gains_tax/property/analyze_selling',
      method: 'post',
      ...variables,
    });

export const useAnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError,
        AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError,
      AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables
    >(
      (
        variables: AnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables,
      ) =>
        fetchAnalyzeCapitalGainsTaxForPropertyMvpKrCapitalGainsTaxPropertyAnalyzeSellingPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostVariables = {
  body: Schemas.ServerSchemasRequestsAmITemp2Request;
} & YuppieContext['fetcherOptions'];

export const fetchAmITmp2housesOwnerMvpKrAmITmp2housesOwnerPost = (
  variables: AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostVariables,
) =>
  yuppieFetch<
    void,
    AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostError,
    Schemas.ServerSchemasRequestsAmITemp2Request,
    {},
    {},
    {}
  >({ url: '/mvp/kr/am_i_tmp_2houses_owner', method: 'post', ...variables });

export const useAmITmp2housesOwnerMvpKrAmITmp2housesOwnerPost = (
  variables: AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostError,
      void
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    void,
    AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostError,
    void
  >(
    queryKeyFn({
      path: '/mvp/kr/am_i_tmp_2houses_owner',
      operationId: 'amITmp2housesOwnerMvpKrAmITmp2housesOwnerPost',
      variables,
    }),
    () =>
      fetchAmITmp2housesOwnerMvpKrAmITmp2housesOwnerPost({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables =
  {
    body: Schemas.ServerSchemasRequestsAmI1HouseholderBeneficial;
  } & YuppieContext['fetcherOptions'];

export const fetchIs1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPost =
  (
    variables: Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables,
  ) =>
    yuppieFetch<
      void,
      Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError,
      Schemas.ServerSchemasRequestsAmI1HouseholderBeneficial,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/capital_gains_tax/house/am_i_1householder_tax_exempted',
      method: 'post',
      ...variables,
    });

export const useIs1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError,
        Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError,
      Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables
    >(
      (
        variables: Is1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables,
      ) =>
        fetchIs1householderTaxExemptedMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostVariables =
  {
    body: Schemas.ServerSchemasRequestsAmITemp2Request;
  } & YuppieContext['fetcherOptions'];

export const fetchAmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPost =
  (
    variables: AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostVariables,
  ) =>
    yuppieFetch<
      void,
      AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostError,
      Schemas.ServerSchemasRequestsAmITemp2Request,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/before_one_more_house_for_1householder',
      method: 'post',
      ...variables,
    });

export const useAmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostError,
        AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostError,
      AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostVariables
    >(
      (
        variables: AmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPostVariables,
      ) =>
        fetchAmITmp2housesOwnerAliasMvpKrBeforeOneMoreHouseFor1householderPost({
          ...fetcherOptions,
          ...variables,
        }),
      options,
    );
  };

export type AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostVariables =
  {
    body: Schemas.ServerSchemasRequestsAmI1HouseholderBeneficial;
  } & YuppieContext['fetcherOptions'];

export const fetchAmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPost =
  (
    variables: AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostVariables,
  ) =>
    yuppieFetch<
      void,
      AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostError,
      Schemas.ServerSchemasRequestsAmI1HouseholderBeneficial,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/before_capital_gains_tax_for_1householder',
      method: 'post',
      ...variables,
    });

export const useAmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostError,
        AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostError,
      AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostVariables
    >(
      (
        variables: AmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPostVariables,
      ) =>
        fetchAmI1householderBeneficialMvpKrBeforeCapitalGainsTaxFor1householderPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables =
  {
    body: Schemas.ServerSchemasRequestsToLiveOrNotToLive;
  } & YuppieContext['fetcherOptions'];

export const fetchToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePost =
  (
    variables: ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables,
  ) =>
    yuppieFetch<
      void,
      ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError,
      Schemas.ServerSchemasRequestsToLiveOrNotToLive,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/capital_gains_tax/house/to_live_or_not_to_live',
      method: 'post',
      ...variables,
    });

export const useToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError,
        ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError,
      ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables
    >(
      (
        variables: ToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables,
      ) =>
        fetchToLiveOrNotToLiveMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePost({
          ...fetcherOptions,
          ...variables,
        }),
      options,
    );
  };

export type KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables =
  {
    body: Schemas.ServerSchemasRequestsCapitalGainsTaxRequestForTmp2HousesOwnerSellOld;
  } & YuppieContext['fetcherOptions'];

export const fetchKrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPost =
  (
    variables: KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables,
  ) =>
    yuppieFetch<
      void,
      KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError,
      Schemas.ServerSchemasRequestsCapitalGainsTaxRequestForTmp2HousesOwnerSellOld,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/capital_gains_tax/house/for_tmp2house_owner_to_sell_old',
      method: 'post',
      ...variables,
    });

export const useKrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError,
        KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError,
      KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables
    >(
      (
        variables: KrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables,
      ) =>
        fetchKrCapitalGainsTaxHouseForTmp2houseOwnerMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables =
  {
    body: Schemas.ServerSchemasRequestsNeedWinWinPartnership;
  } & YuppieContext['fetcherOptions'];

export const fetchKrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPost =
  (
    variables: KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables,
  ) =>
    yuppieFetch<
      void,
      KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError,
      Schemas.ServerSchemasRequestsNeedWinWinPartnership,
      {},
      {},
      {}
    >({
      url: '/mvp/kr/capital_gains_tax/house/need_win_win_partnership',
      method: 'post',
      ...variables,
    });

export const useKrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError,
        KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError,
      KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables
    >(
      (
        variables: KrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables,
      ) =>
        fetchKrCapitalGainsTaxNeedWinWinPartnershipMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestCalculateKrPropertyAcquisitionTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePost =
  (
    variables: CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostVariables,
  ) =>
    yuppieFetch<
      void,
      CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostError,
      Schemas.ServerSchemasRequestsLatestCalculateKrPropertyAcquisitionTaxRequest,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/acquisition_tax/calculate',
      method: 'post',
      ...variables,
    });

export const useCalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostError,
        CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostError,
      CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostVariables
    >(
      (
        variables: CalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePostVariables,
      ) =>
        fetchCalculateKrAcquisitionTaxLatestMvpKrAcquisitionTaxCalculatePost({
          ...fetcherOptions,
          ...variables,
        }),
      options,
    );
  };

export type CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePost = (
  variables: CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostVariables,
) =>
  yuppieFetch<
    void,
    CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostError,
    Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest,
    {},
    {},
    {}
  >({
    url: '/latest/mvp/kr/property_tax/calculate',
    method: 'post',
    ...variables,
  });

export const useCalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostError,
      CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostError,
    CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostVariables
  >(
    (
      variables: CalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePostVariables,
    ) =>
      fetchCalculateKrPropertyTaxLatestMvpKrPropertyTaxCalculatePost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CalculateKrCretLatestMvpKrCretCalculatePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrCretLatestMvpKrCretCalculatePostVariables = {
  body: Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest;
} & YuppieContext['fetcherOptions'];

export const fetchCalculateKrCretLatestMvpKrCretCalculatePost = (
  variables: CalculateKrCretLatestMvpKrCretCalculatePostVariables,
) =>
  yuppieFetch<
    void,
    CalculateKrCretLatestMvpKrCretCalculatePostError,
    Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest,
    {},
    {},
    {}
  >({ url: '/latest/mvp/kr/cret/calculate', method: 'post', ...variables });

export const useCalculateKrCretLatestMvpKrCretCalculatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CalculateKrCretLatestMvpKrCretCalculatePostError,
      CalculateKrCretLatestMvpKrCretCalculatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CalculateKrCretLatestMvpKrCretCalculatePostError,
    CalculateKrCretLatestMvpKrCretCalculatePostVariables
  >(
    (variables: CalculateKrCretLatestMvpKrCretCalculatePostVariables) =>
      fetchCalculateKrCretLatestMvpKrCretCalculatePost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPost =
  (
    variables: CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostVariables,
  ) =>
    yuppieFetch<
      void,
      CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostError,
      Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/tax_for_real_estate/maintenance/history',
      method: 'post',
      ...variables,
    });

export const useCalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostError,
        CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostError,
      CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostVariables
    >(
      (
        variables: CalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPostVariables,
      ) =>
        fetchCalculateKrMaintenanceTaxHistoryLatestMvpKrTaxForRealEstateMaintenanceHistoryPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestInferFutureKrTaxMaintenanceRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchInferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePost =
  (
    variables: InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables,
  ) =>
    yuppieFetch<
      void,
      InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostError,
      Schemas.ServerSchemasRequestsLatestInferFutureKrTaxMaintenanceRequest,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/tax_for_real_estate/maintenance/infer_future',
      method: 'post',
      ...variables,
    });

export const useInferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostError,
        InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostError,
      InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables
    >(
      (
        variables: InferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePostVariables,
      ) =>
        fetchInferFutureKrTaxRealEstateMaintenanceLatestMvpKrTaxForRealEstateMaintenanceInferFuturePost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchCalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePost =
  (
    variables: CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables,
  ) =>
    yuppieFetch<
      void,
      CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError,
      Schemas.ServerSchemasRequestsLatestCalculateKrTaxRequest,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/tax_for_real_estate/maintenance/history_and_inference',
      method: 'post',
      ...variables,
    });

export const useCalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError,
        CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostError,
      CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables
    >(
      (
        variables: CalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePostVariables,
      ) =>
        fetchCalculateKrTaxForRealEstateForMaintenanceHistoryAndFutureLatestMvpKrTaxForRealEstateMaintenanceHistoryAndInferencePost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestCapitalGainsTaxRequestForDefault;
  } & YuppieContext['fetcherOptions'];

export const fetchInferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPost =
  (
    variables: InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables,
  ) =>
    yuppieFetch<
      void,
      InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError,
      Schemas.ServerSchemasRequestsLatestCapitalGainsTaxRequestForDefault,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/capital_gains_tax/house/infer_future_default',
      method: 'post',
      ...variables,
    });

export const useInferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError,
        InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostError,
      InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables
    >(
      (
        variables: InferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPostVariables,
      ) =>
        fetchInferFutureKrCapitalGainsTaxDefaultLatestMvpKrCapitalGainsTaxHouseInferFutureDefaultPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestAnalyzePropertyCapitalGainsTaxRequest;
  } & YuppieContext['fetcherOptions'];

export const fetchAnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPost =
  (
    variables: AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables,
  ) =>
    yuppieFetch<
      void,
      AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError,
      Schemas.ServerSchemasRequestsLatestAnalyzePropertyCapitalGainsTaxRequest,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/capital_gains_tax/property/analyze_selling',
      method: 'post',
      ...variables,
    });

export const useAnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError,
        AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostError,
      AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables
    >(
      (
        variables: AnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPostVariables,
      ) =>
        fetchAnalyzeCapitalGainsTaxForPropertyLatestMvpKrCapitalGainsTaxPropertyAnalyzeSellingPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostVariables = {
  body: Schemas.ServerSchemasRequestsLatestAmITemp2Request;
} & YuppieContext['fetcherOptions'];

export const fetchAmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPost = (
  variables: AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostVariables,
) =>
  yuppieFetch<
    void,
    AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostError,
    Schemas.ServerSchemasRequestsLatestAmITemp2Request,
    {},
    {},
    {}
  >({
    url: '/latest/mvp/kr/am_i_tmp_2houses_owner',
    method: 'post',
    ...variables,
  });

export const useAmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostError,
      AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostError,
    AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostVariables
  >(
    (variables: AmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPostVariables) =>
      fetchAmITmp2housesOwnerLatestMvpKrAmITmp2housesOwnerPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestAmI1HouseholderBeneficial;
  } & YuppieContext['fetcherOptions'];

export const fetchIs1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPost =
  (
    variables: Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables,
  ) =>
    yuppieFetch<
      void,
      Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError,
      Schemas.ServerSchemasRequestsLatestAmI1HouseholderBeneficial,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/capital_gains_tax/house/am_i_1householder_tax_exempted',
      method: 'post',
      ...variables,
    });

export const useIs1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError,
        Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostError,
      Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables
    >(
      (
        variables: Is1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPostVariables,
      ) =>
        fetchIs1householderTaxExemptedLatestMvpKrCapitalGainsTaxHouseAmI1householderTaxExemptedPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestAmITemp2Request;
  } & YuppieContext['fetcherOptions'];

export const fetchAmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPost =
  (
    variables: AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostVariables,
  ) =>
    yuppieFetch<
      void,
      AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostError,
      Schemas.ServerSchemasRequestsLatestAmITemp2Request,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/before_one_more_house_for_1householder',
      method: 'post',
      ...variables,
    });

export const useAmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostError,
        AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostError,
      AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostVariables
    >(
      (
        variables: AmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPostVariables,
      ) =>
        fetchAmITmp2housesOwnerAliasLatestMvpKrBeforeOneMoreHouseFor1householderPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestAmI1HouseholderBeneficial;
  } & YuppieContext['fetcherOptions'];

export const fetchAmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPost =
  (
    variables: AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostVariables,
  ) =>
    yuppieFetch<
      void,
      AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostError,
      Schemas.ServerSchemasRequestsLatestAmI1HouseholderBeneficial,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/before_capital_gains_tax_for_1householder',
      method: 'post',
      ...variables,
    });

export const useAmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostError,
        AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostError,
      AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostVariables
    >(
      (
        variables: AmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPostVariables,
      ) =>
        fetchAmI1householderBeneficialLatestMvpKrBeforeCapitalGainsTaxFor1householderPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestToLiveOrNotToLive;
  } & YuppieContext['fetcherOptions'];

export const fetchToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePost =
  (
    variables: ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables,
  ) =>
    yuppieFetch<
      void,
      ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError,
      Schemas.ServerSchemasRequestsLatestToLiveOrNotToLive,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/capital_gains_tax/house/to_live_or_not_to_live',
      method: 'post',
      ...variables,
    });

export const useToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError,
        ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostError,
      ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables
    >(
      (
        variables: ToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePostVariables,
      ) =>
        fetchToLiveOrNotToLiveLatestMvpKrCapitalGainsTaxHouseToLiveOrNotToLivePost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestCapitalGainsTaxRequestForTmp2HousesOwnerSellOld;
  } & YuppieContext['fetcherOptions'];

export const fetchKrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPost =
  (
    variables: KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables,
  ) =>
    yuppieFetch<
      void,
      KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError,
      Schemas.ServerSchemasRequestsLatestCapitalGainsTaxRequestForTmp2HousesOwnerSellOld,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/capital_gains_tax/house/for_tmp2house_owner_to_sell_old',
      method: 'post',
      ...variables,
    });

export const useKrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError,
        KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostError,
      KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables
    >(
      (
        variables: KrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPostVariables,
      ) =>
        fetchKrCapitalGainsTaxHouseForTmp2houseOwnerLatestMvpKrCapitalGainsTaxHouseForTmp2houseOwnerToSellOldPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables =
  {
    body: Schemas.ServerSchemasRequestsLatestNeedWinWinPartnership;
  } & YuppieContext['fetcherOptions'];

export const fetchKrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPost =
  (
    variables: KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables,
  ) =>
    yuppieFetch<
      void,
      KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError,
      Schemas.ServerSchemasRequestsLatestNeedWinWinPartnership,
      {},
      {},
      {}
    >({
      url: '/latest/mvp/kr/capital_gains_tax/house/need_win_win_partnership',
      method: 'post',
      ...variables,
    });

export const useKrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPost =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        void,
        KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError,
        KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables
      >,
      'mutationFn'
    >,
  ) => {
    const { fetcherOptions } = useYuppieContext();
    return reactQuery.useMutation<
      void,
      KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostError,
      KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables
    >(
      (
        variables: KrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPostVariables,
      ) =>
        fetchKrCapitalGainsTaxNeedWinWinPartnershipLatestMvpKrCapitalGainsTaxHouseNeedWinWinPartnershipPost(
          { ...fetcherOptions, ...variables },
        ),
      options,
    );
  };

export type GetPropertyUniversesNonePropertyRandomGetQueryParams = {
  num: number;
};

export type GetPropertyUniversesNonePropertyRandomGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetPropertyUniversesNonePropertyRandomGetResponse =
  Schemas.Property[];

export type GetPropertyUniversesNonePropertyRandomGetVariables = {
  queryParams: GetPropertyUniversesNonePropertyRandomGetQueryParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetPropertyUniversesNonePropertyRandomGet = (
  variables: GetPropertyUniversesNonePropertyRandomGetVariables,
) =>
  yuppieFetch<
    GetPropertyUniversesNonePropertyRandomGetResponse,
    GetPropertyUniversesNonePropertyRandomGetError,
    undefined,
    {},
    GetPropertyUniversesNonePropertyRandomGetQueryParams,
    {}
  >({ url: '/universes/none/property/random', method: 'get', ...variables });

export const useGetPropertyUniversesNonePropertyRandomGet = (
  variables: GetPropertyUniversesNonePropertyRandomGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPropertyUniversesNonePropertyRandomGetResponse,
      GetPropertyUniversesNonePropertyRandomGetError,
      GetPropertyUniversesNonePropertyRandomGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetPropertyUniversesNonePropertyRandomGetResponse,
    GetPropertyUniversesNonePropertyRandomGetError,
    GetPropertyUniversesNonePropertyRandomGetResponse
  >(
    queryKeyFn({
      path: '/universes/none/property/random',
      operationId: 'getPropertyUniversesNonePropertyRandomGet',
      variables,
    }),
    () =>
      fetchGetPropertyUniversesNonePropertyRandomGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPropertyUniversesNonePropertyPkGetPathParams = {
  pk: string;
};

export type GetPropertyUniversesNonePropertyPkGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetPropertyUniversesNonePropertyPkGetVariables = {
  pathParams: GetPropertyUniversesNonePropertyPkGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetPropertyUniversesNonePropertyPkGet = (
  variables: GetPropertyUniversesNonePropertyPkGetVariables,
) =>
  yuppieFetch<
    Schemas.Property,
    GetPropertyUniversesNonePropertyPkGetError,
    undefined,
    {},
    {},
    GetPropertyUniversesNonePropertyPkGetPathParams
  >({ url: '/universes/none/property/{pk}', method: 'get', ...variables });

export const useGetPropertyUniversesNonePropertyPkGet = (
  variables: GetPropertyUniversesNonePropertyPkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Property,
      GetPropertyUniversesNonePropertyPkGetError,
      Schemas.Property
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.Property,
    GetPropertyUniversesNonePropertyPkGetError,
    Schemas.Property
  >(
    queryKeyFn({
      path: '/universes/none/property/{pk}',
      operationId: 'getPropertyUniversesNonePropertyPkGet',
      variables,
    }),
    () =>
      fetchGetPropertyUniversesNonePropertyPkGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UpdateOfficialPriceUniversesNonePropertyPkPostPathParams = {
  pk: string;
};

export type UpdateOfficialPriceUniversesNonePropertyPkPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type UpdateOfficialPriceUniversesNonePropertyPkPostVariables = {
  body: Schemas.PropertyOfficialPriceUpdate;
  pathParams: UpdateOfficialPriceUniversesNonePropertyPkPostPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchUpdateOfficialPriceUniversesNonePropertyPkPost = (
  variables: UpdateOfficialPriceUniversesNonePropertyPkPostVariables,
) =>
  yuppieFetch<
    Schemas.Property,
    UpdateOfficialPriceUniversesNonePropertyPkPostError,
    Schemas.PropertyOfficialPriceUpdate,
    {},
    {},
    UpdateOfficialPriceUniversesNonePropertyPkPostPathParams
  >({ url: '/universes/none/property/{pk}', method: 'post', ...variables });

export const useUpdateOfficialPriceUniversesNonePropertyPkPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Property,
      UpdateOfficialPriceUniversesNonePropertyPkPostError,
      UpdateOfficialPriceUniversesNonePropertyPkPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.Property,
    UpdateOfficialPriceUniversesNonePropertyPkPostError,
    UpdateOfficialPriceUniversesNonePropertyPkPostVariables
  >(
    (variables: UpdateOfficialPriceUniversesNonePropertyPkPostVariables) =>
      fetchUpdateOfficialPriceUniversesNonePropertyPkPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetPropertiesUniversesIdPropertiesGetPathParams = {
  id: number;
};

export type GetPropertiesUniversesIdPropertiesGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetPropertiesUniversesIdPropertiesGetResponse =
  Schemas.PropertyOwnership[];

export type GetPropertiesUniversesIdPropertiesGetVariables = {
  pathParams: GetPropertiesUniversesIdPropertiesGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetPropertiesUniversesIdPropertiesGet = (
  variables: GetPropertiesUniversesIdPropertiesGetVariables,
) =>
  yuppieFetch<
    GetPropertiesUniversesIdPropertiesGetResponse,
    GetPropertiesUniversesIdPropertiesGetError,
    undefined,
    {},
    {},
    GetPropertiesUniversesIdPropertiesGetPathParams
  >({ url: '/universes/{id}/properties', method: 'get', ...variables });

export const useGetPropertiesUniversesIdPropertiesGet = (
  variables: GetPropertiesUniversesIdPropertiesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPropertiesUniversesIdPropertiesGetResponse,
      GetPropertiesUniversesIdPropertiesGetError,
      GetPropertiesUniversesIdPropertiesGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetPropertiesUniversesIdPropertiesGetResponse,
    GetPropertiesUniversesIdPropertiesGetError,
    GetPropertiesUniversesIdPropertiesGetResponse
  >(
    queryKeyFn({
      path: '/universes/{id}/properties',
      operationId: 'getPropertiesUniversesIdPropertiesGet',
      variables,
    }),
    () =>
      fetchGetPropertiesUniversesIdPropertiesGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreatePropertyUniversesIdPropertiesPostPathParams = {
  id: number;
};

export type CreatePropertyUniversesIdPropertiesPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CreatePropertyUniversesIdPropertiesPostVariables = {
  body: Schemas.PropertyOwnershipCreate;
  pathParams: CreatePropertyUniversesIdPropertiesPostPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchCreatePropertyUniversesIdPropertiesPost = (
  variables: CreatePropertyUniversesIdPropertiesPostVariables,
) =>
  yuppieFetch<
    void,
    CreatePropertyUniversesIdPropertiesPostError,
    Schemas.PropertyOwnershipCreate,
    {},
    {},
    CreatePropertyUniversesIdPropertiesPostPathParams
  >({ url: '/universes/{id}/properties', method: 'post', ...variables });

export const useCreatePropertyUniversesIdPropertiesPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CreatePropertyUniversesIdPropertiesPostError,
      CreatePropertyUniversesIdPropertiesPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CreatePropertyUniversesIdPropertiesPostError,
    CreatePropertyUniversesIdPropertiesPostVariables
  >(
    (variables: CreatePropertyUniversesIdPropertiesPostVariables) =>
      fetchCreatePropertyUniversesIdPropertiesPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type UpdatePropertyUniversesIdPropertiesPkPutPathParams = {
  id: number;
  pk: string;
};

export type UpdatePropertyUniversesIdPropertiesPkPutError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type UpdatePropertyUniversesIdPropertiesPkPutVariables = {
  body?: Schemas.PropertyOwnershipUpdate;
  pathParams: UpdatePropertyUniversesIdPropertiesPkPutPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchUpdatePropertyUniversesIdPropertiesPkPut = (
  variables: UpdatePropertyUniversesIdPropertiesPkPutVariables,
) =>
  yuppieFetch<
    void,
    UpdatePropertyUniversesIdPropertiesPkPutError,
    Schemas.PropertyOwnershipUpdate,
    {},
    {},
    UpdatePropertyUniversesIdPropertiesPkPutPathParams
  >({ url: '/universes/{id}/properties/{pk}', method: 'put', ...variables });

export const useUpdatePropertyUniversesIdPropertiesPkPut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      UpdatePropertyUniversesIdPropertiesPkPutError,
      UpdatePropertyUniversesIdPropertiesPkPutVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    UpdatePropertyUniversesIdPropertiesPkPutError,
    UpdatePropertyUniversesIdPropertiesPkPutVariables
  >(
    (variables: UpdatePropertyUniversesIdPropertiesPkPutVariables) =>
      fetchUpdatePropertyUniversesIdPropertiesPkPut({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type DeletePropertyUniversesIdPropertiesPkDeletePathParams = {
  id: number;
  pk: string;
};

export type DeletePropertyUniversesIdPropertiesPkDeleteError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type DeletePropertyUniversesIdPropertiesPkDeleteVariables = {
  body?: Schemas.PropertyOwnershipDelete;
  pathParams: DeletePropertyUniversesIdPropertiesPkDeletePathParams;
} & YuppieContext['fetcherOptions'];

export const fetchDeletePropertyUniversesIdPropertiesPkDelete = (
  variables: DeletePropertyUniversesIdPropertiesPkDeleteVariables,
) =>
  yuppieFetch<
    void,
    DeletePropertyUniversesIdPropertiesPkDeleteError,
    Schemas.PropertyOwnershipDelete,
    {},
    {},
    DeletePropertyUniversesIdPropertiesPkDeletePathParams
  >({ url: '/universes/{id}/properties/{pk}', method: 'delete', ...variables });

export const useDeletePropertyUniversesIdPropertiesPkDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      DeletePropertyUniversesIdPropertiesPkDeleteError,
      DeletePropertyUniversesIdPropertiesPkDeleteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    DeletePropertyUniversesIdPropertiesPkDeleteError,
    DeletePropertyUniversesIdPropertiesPkDeleteVariables
  >(
    (variables: DeletePropertyUniversesIdPropertiesPkDeleteVariables) =>
      fetchDeletePropertyUniversesIdPropertiesPkDelete({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type QueryDongsApartmentsKeyDongsGetPathParams = {
  key: string;
};

export type QueryDongsApartmentsKeyDongsGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type QueryDongsApartmentsKeyDongsGetVariables = {
  pathParams: QueryDongsApartmentsKeyDongsGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchQueryDongsApartmentsKeyDongsGet = (
  variables: QueryDongsApartmentsKeyDongsGetVariables,
) =>
  yuppieFetch<
    Schemas.ComplexDongs,
    QueryDongsApartmentsKeyDongsGetError,
    undefined,
    {},
    {},
    QueryDongsApartmentsKeyDongsGetPathParams
  >({ url: '/apartments/{key}/dongs', method: 'get', ...variables });

export const useQueryDongsApartmentsKeyDongsGet = (
  variables: QueryDongsApartmentsKeyDongsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ComplexDongs,
      QueryDongsApartmentsKeyDongsGetError,
      Schemas.ComplexDongs
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.ComplexDongs,
    QueryDongsApartmentsKeyDongsGetError,
    Schemas.ComplexDongs
  >(
    queryKeyFn({
      path: '/apartments/{key}/dongs',
      operationId: 'queryDongsApartmentsKeyDongsGet',
      variables,
    }),
    () =>
      fetchQueryDongsApartmentsKeyDongsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type QueryDongsApartmentsKeyAreasGetPathParams = {
  key: string;
};

export type QueryDongsApartmentsKeyAreasGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type QueryDongsApartmentsKeyAreasGetVariables = {
  pathParams: QueryDongsApartmentsKeyAreasGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchQueryDongsApartmentsKeyAreasGet = (
  variables: QueryDongsApartmentsKeyAreasGetVariables,
) =>
  yuppieFetch<
    Schemas.ComplexAreaTypes,
    QueryDongsApartmentsKeyAreasGetError,
    undefined,
    {},
    {},
    QueryDongsApartmentsKeyAreasGetPathParams
  >({ url: '/apartments/{key}/areas', method: 'get', ...variables });

export const useQueryDongsApartmentsKeyAreasGet = (
  variables: QueryDongsApartmentsKeyAreasGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ComplexAreaTypes,
      QueryDongsApartmentsKeyAreasGetError,
      Schemas.ComplexAreaTypes
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.ComplexAreaTypes,
    QueryDongsApartmentsKeyAreasGetError,
    Schemas.ComplexAreaTypes
  >(
    queryKeyFn({
      path: '/apartments/{key}/areas',
      operationId: 'queryDongsApartmentsKeyAreasGet',
      variables,
    }),
    () =>
      fetchQueryDongsApartmentsKeyAreasGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type QueryHosApartmentsKeyHosGetPathParams = {
  key: string;
};

export type QueryHosApartmentsKeyHosGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type QueryHosApartmentsKeyHosGetVariables = {
  pathParams: QueryHosApartmentsKeyHosGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchQueryHosApartmentsKeyHosGet = (
  variables: QueryHosApartmentsKeyHosGetVariables,
) =>
  yuppieFetch<
    Schemas.PropertyHos,
    QueryHosApartmentsKeyHosGetError,
    undefined,
    {},
    {},
    QueryHosApartmentsKeyHosGetPathParams
  >({ url: '/apartments/{key}/hos', method: 'get', ...variables });

export const useQueryHosApartmentsKeyHosGet = (
  variables: QueryHosApartmentsKeyHosGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PropertyHos,
      QueryHosApartmentsKeyHosGetError,
      Schemas.PropertyHos
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.PropertyHos,
    QueryHosApartmentsKeyHosGetError,
    Schemas.PropertyHos
  >(
    queryKeyFn({
      path: '/apartments/{key}/hos',
      operationId: 'queryHosApartmentsKeyHosGet',
      variables,
    }),
    () => fetchQueryHosApartmentsKeyHosGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type QueryAllHosApartmentsKeyAreaHosGetPathParams = {
  key: string;
  area: number;
};

export type QueryAllHosApartmentsKeyAreaHosGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type QueryAllHosApartmentsKeyAreaHosGetVariables = {
  pathParams: QueryAllHosApartmentsKeyAreaHosGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchQueryAllHosApartmentsKeyAreaHosGet = (
  variables: QueryAllHosApartmentsKeyAreaHosGetVariables,
) =>
  yuppieFetch<
    Schemas.PropertyHos,
    QueryAllHosApartmentsKeyAreaHosGetError,
    undefined,
    {},
    {},
    QueryAllHosApartmentsKeyAreaHosGetPathParams
  >({ url: '/apartments/{key}/{area}/hos', method: 'get', ...variables });

export const useQueryAllHosApartmentsKeyAreaHosGet = (
  variables: QueryAllHosApartmentsKeyAreaHosGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PropertyHos,
      QueryAllHosApartmentsKeyAreaHosGetError,
      Schemas.PropertyHos
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.PropertyHos,
    QueryAllHosApartmentsKeyAreaHosGetError,
    Schemas.PropertyHos
  >(
    queryKeyFn({
      path: '/apartments/{key}/{area}/hos',
      operationId: 'queryAllHosApartmentsKeyAreaHosGet',
      variables,
    }),
    () =>
      fetchQueryAllHosApartmentsKeyAreaHosGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AgreeTermsTermsAgreementPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type AgreeTermsTermsAgreementPostVariables = {
  body: Schemas.TermsAgreementCreate;
} & YuppieContext['fetcherOptions'];

export const fetchAgreeTermsTermsAgreementPost = (
  variables: AgreeTermsTermsAgreementPostVariables,
) =>
  yuppieFetch<
    Schemas.TermsAgreement,
    AgreeTermsTermsAgreementPostError,
    Schemas.TermsAgreementCreate,
    {},
    {},
    {}
  >({ url: '/terms_agreement', method: 'post', ...variables });

export const useAgreeTermsTermsAgreementPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TermsAgreement,
      AgreeTermsTermsAgreementPostError,
      AgreeTermsTermsAgreementPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.TermsAgreement,
    AgreeTermsTermsAgreementPostError,
    AgreeTermsTermsAgreementPostVariables
  >(
    (variables: AgreeTermsTermsAgreementPostVariables) =>
      fetchAgreeTermsTermsAgreementPost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateUserUserPutError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type UpdateUserUserPutVariables = {
  body?: Schemas.UserUpdate;
} & YuppieContext['fetcherOptions'];

export const fetchUpdateUserUserPut = (variables: UpdateUserUserPutVariables) =>
  yuppieFetch<
    Schemas.User,
    UpdateUserUserPutError,
    Schemas.UserUpdate,
    {},
    {},
    {}
  >({ url: '/user', method: 'put', ...variables });

export const useUpdateUserUserPut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UpdateUserUserPutError,
      UpdateUserUserPutVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.User,
    UpdateUserUserPutError,
    UpdateUserUserPutVariables
  >(
    (variables: UpdateUserUserPutVariables) =>
      fetchUpdateUserUserPut({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteUserUserDeleteError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type DeleteUserUserDeleteVariables = {
  body?: Schemas.UserDelete;
} & YuppieContext['fetcherOptions'];

export const fetchDeleteUserUserDelete = (
  variables: DeleteUserUserDeleteVariables,
) =>
  yuppieFetch<
    Schemas.User,
    DeleteUserUserDeleteError,
    Schemas.UserDelete,
    {},
    {},
    {}
  >({ url: '/user', method: 'delete', ...variables });

export const useDeleteUserUserDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      DeleteUserUserDeleteError,
      DeleteUserUserDeleteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    Schemas.User,
    DeleteUserUserDeleteError,
    DeleteUserUserDeleteVariables
  >(
    (variables: DeleteUserUserDeleteVariables) =>
      fetchDeleteUserUserDelete({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type UpdateFcmTokenPutError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type UpdateFcmTokenPutVariables = {
  body: Schemas.FcmTokenUpdate;
} & YuppieContext['fetcherOptions'];

export const fetchUpdateFcmTokenPut = (variables: UpdateFcmTokenPutVariables) =>
  yuppieFetch<void, UpdateFcmTokenPutError, Schemas.FcmTokenUpdate, {}, {}, {}>(
    { url: '/fcm_token', method: 'put', ...variables },
  );

export const useUpdateFcmTokenPut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      UpdateFcmTokenPutError,
      UpdateFcmTokenPutVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    UpdateFcmTokenPutError,
    UpdateFcmTokenPutVariables
  >(
    (variables: UpdateFcmTokenPutVariables) =>
      fetchUpdateFcmTokenPut({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type CreateFcmTokenPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type CreateFcmTokenPostVariables = {
  body: Schemas.FcmTokenCreate;
} & YuppieContext['fetcherOptions'];

export const fetchCreateFcmTokenPost = (
  variables: CreateFcmTokenPostVariables,
) =>
  yuppieFetch<
    void,
    CreateFcmTokenPostError,
    Schemas.FcmTokenCreate,
    {},
    {},
    {}
  >({ url: '/fcm_token', method: 'post', ...variables });

export const useCreateFcmTokenPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CreateFcmTokenPostError,
      CreateFcmTokenPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CreateFcmTokenPostError,
    CreateFcmTokenPostVariables
  >(
    (variables: CreateFcmTokenPostVariables) =>
      fetchCreateFcmTokenPost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type DeleteFcmTokenDeleteError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type DeleteFcmTokenDeleteVariables = {
  body: Schemas.FcmTokenDelete;
} & YuppieContext['fetcherOptions'];

export const fetchDeleteFcmTokenDelete = (
  variables: DeleteFcmTokenDeleteVariables,
) =>
  yuppieFetch<
    void,
    DeleteFcmTokenDeleteError,
    Schemas.FcmTokenDelete,
    {},
    {},
    {}
  >({ url: '/fcm_token', method: 'delete', ...variables });

export const useDeleteFcmTokenDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      DeleteFcmTokenDeleteError,
      DeleteFcmTokenDeleteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    DeleteFcmTokenDeleteError,
    DeleteFcmTokenDeleteVariables
  >(
    (variables: DeleteFcmTokenDeleteVariables) =>
      fetchDeleteFcmTokenDelete({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type GetOfficialPriceOfficialPricePkGetPathParams = {
  pk: string;
};

export type GetOfficialPriceOfficialPricePkGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetOfficialPriceOfficialPricePkGetResponse =
  Schemas.OfficialPrice[];

export type GetOfficialPriceOfficialPricePkGetVariables = {
  pathParams: GetOfficialPriceOfficialPricePkGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetOfficialPriceOfficialPricePkGet = (
  variables: GetOfficialPriceOfficialPricePkGetVariables,
) =>
  yuppieFetch<
    GetOfficialPriceOfficialPricePkGetResponse,
    GetOfficialPriceOfficialPricePkGetError,
    undefined,
    {},
    {},
    GetOfficialPriceOfficialPricePkGetPathParams
  >({ url: '/official_price/{pk}', method: 'get', ...variables });

export const useGetOfficialPriceOfficialPricePkGet = (
  variables: GetOfficialPriceOfficialPricePkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetOfficialPriceOfficialPricePkGetResponse,
      GetOfficialPriceOfficialPricePkGetError,
      GetOfficialPriceOfficialPricePkGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetOfficialPriceOfficialPricePkGetResponse,
    GetOfficialPriceOfficialPricePkGetError,
    GetOfficialPriceOfficialPricePkGetResponse
  >(
    queryKeyFn({
      path: '/official_price/{pk}',
      operationId: 'getOfficialPriceOfficialPricePkGet',
      variables,
    }),
    () =>
      fetchGetOfficialPriceOfficialPricePkGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type CreateOrUpdateOfficialPriceOfficialPricePkPostPathParams = {
  pk: string;
};

export type CreateOrUpdateOfficialPriceOfficialPricePkPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CreateOrUpdateOfficialPriceOfficialPricePkPostVariables = {
  body: Schemas.OfficialPriceUpdate;
  pathParams: CreateOrUpdateOfficialPriceOfficialPricePkPostPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchCreateOrUpdateOfficialPriceOfficialPricePkPost = (
  variables: CreateOrUpdateOfficialPriceOfficialPricePkPostVariables,
) =>
  yuppieFetch<
    void,
    CreateOrUpdateOfficialPriceOfficialPricePkPostError,
    Schemas.OfficialPriceUpdate,
    {},
    {},
    CreateOrUpdateOfficialPriceOfficialPricePkPostPathParams
  >({ url: '/official_price/{pk}', method: 'post', ...variables });

export const useCreateOrUpdateOfficialPriceOfficialPricePkPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CreateOrUpdateOfficialPriceOfficialPricePkPostError,
      CreateOrUpdateOfficialPriceOfficialPricePkPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    CreateOrUpdateOfficialPriceOfficialPricePkPostError,
    CreateOrUpdateOfficialPriceOfficialPricePkPostVariables
  >(
    (variables: CreateOrUpdateOfficialPriceOfficialPricePkPostVariables) =>
      fetchCreateOrUpdateOfficialPriceOfficialPricePkPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type GetOfficialPriceOfficialPricePkLatestGetPathParams = {
  pk: string;
};

export type GetOfficialPriceOfficialPricePkLatestGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetOfficialPriceOfficialPricePkLatestGetResponse =
  Schemas.OfficialPrice[];

export type GetOfficialPriceOfficialPricePkLatestGetVariables = {
  pathParams: GetOfficialPriceOfficialPricePkLatestGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetOfficialPriceOfficialPricePkLatestGet = (
  variables: GetOfficialPriceOfficialPricePkLatestGetVariables,
) =>
  yuppieFetch<
    GetOfficialPriceOfficialPricePkLatestGetResponse,
    GetOfficialPriceOfficialPricePkLatestGetError,
    undefined,
    {},
    {},
    GetOfficialPriceOfficialPricePkLatestGetPathParams
  >({ url: '/official_price/{pk}/latest', method: 'get', ...variables });

export const useGetOfficialPriceOfficialPricePkLatestGet = (
  variables: GetOfficialPriceOfficialPricePkLatestGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetOfficialPriceOfficialPricePkLatestGetResponse,
      GetOfficialPriceOfficialPricePkLatestGetError,
      GetOfficialPriceOfficialPricePkLatestGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetOfficialPriceOfficialPricePkLatestGetResponse,
    GetOfficialPriceOfficialPricePkLatestGetError,
    GetOfficialPriceOfficialPricePkLatestGetResponse
  >(
    queryKeyFn({
      path: '/official_price/{pk}/latest',
      operationId: 'getOfficialPriceOfficialPricePkLatestGet',
      variables,
    }),
    () =>
      fetchGetOfficialPriceOfficialPricePkLatestGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetTradeHistoryTradeHistoryPkGetPathParams = {
  pk: string;
};

export type GetTradeHistoryTradeHistoryPkGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetTradeHistoryTradeHistoryPkGetResponse = Schemas.TradeHistory[];

export type GetTradeHistoryTradeHistoryPkGetVariables = {
  pathParams: GetTradeHistoryTradeHistoryPkGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetTradeHistoryTradeHistoryPkGet = (
  variables: GetTradeHistoryTradeHistoryPkGetVariables,
) =>
  yuppieFetch<
    GetTradeHistoryTradeHistoryPkGetResponse,
    GetTradeHistoryTradeHistoryPkGetError,
    undefined,
    {},
    {},
    GetTradeHistoryTradeHistoryPkGetPathParams
  >({ url: '/trade_history/{pk}', method: 'get', ...variables });

export const useGetTradeHistoryTradeHistoryPkGet = (
  variables: GetTradeHistoryTradeHistoryPkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTradeHistoryTradeHistoryPkGetResponse,
      GetTradeHistoryTradeHistoryPkGetError,
      GetTradeHistoryTradeHistoryPkGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetTradeHistoryTradeHistoryPkGetResponse,
    GetTradeHistoryTradeHistoryPkGetError,
    GetTradeHistoryTradeHistoryPkGetResponse
  >(
    queryKeyFn({
      path: '/trade_history/{pk}',
      operationId: 'getTradeHistoryTradeHistoryPkGet',
      variables,
    }),
    () =>
      fetchGetTradeHistoryTradeHistoryPkGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetPathParams =
  {
    pk: string;
  };

export type GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetResponse =
  Schemas.AdjustedAreaHistory[];

export type GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetVariables =
  {
    pathParams: GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGet =
  (
    variables: GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetVariables,
  ) =>
    yuppieFetch<
      GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetResponse,
      GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetError,
      undefined,
      {},
      {},
      GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetPathParams
    >({
      url: '/adjusted_area_history/property/{pk}/all',
      method: 'get',
      ...variables,
    });

export const useGetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGet =
  (
    variables: GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetResponse,
        GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetError,
        GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetResponse
      >,
      'queryKey' | 'queryFn'
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useYuppieContext(options);
    return reactQuery.useQuery<
      GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetResponse,
      GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetError,
      GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetResponse
    >(
      queryKeyFn({
        path: '/adjusted_area_history/property/{pk}/all',
        operationId:
          'getAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGet',
        variables,
      }),
      () =>
        fetchGetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGet({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      },
    );
  };

export type GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetPathParams =
  {
    pk: string;
  };

export type GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetVariables =
  {
    pathParams: GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGet =
  (
    variables: GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetVariables,
  ) =>
    yuppieFetch<
      Schemas.AdjustedAreaHistory,
      GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetError,
      undefined,
      {},
      {},
      GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetPathParams
    >({
      url: '/adjusted_area_history/property/{pk}/latest',
      method: 'get',
      ...variables,
    });

export const useGetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGet =
  (
    variables: GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.AdjustedAreaHistory,
        GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetError,
        Schemas.AdjustedAreaHistory
      >,
      'queryKey' | 'queryFn'
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useYuppieContext(options);
    return reactQuery.useQuery<
      Schemas.AdjustedAreaHistory,
      GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetError,
      Schemas.AdjustedAreaHistory
    >(
      queryKeyFn({
        path: '/adjusted_area_history/property/{pk}/latest',
        operationId:
          'getAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGet',
        variables,
      }),
      () =>
        fetchGetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGet({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      },
    );
  };

export type GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetPathParams =
  {
    pk: string;
    /*
     * @format date
     */
    date: string;
  };

export type GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetVariables = {
  pathParams: GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGet = (
  variables: GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetVariables,
) =>
  yuppieFetch<
    Schemas.AdjustedAreaHistory,
    GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetError,
    undefined,
    {},
    {},
    GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetPathParams
  >({
    url: '/adjusted_area_history/property/{pk}/{date}',
    method: 'get',
    ...variables,
  });

export const useGetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGet = (
  variables: GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AdjustedAreaHistory,
      GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetError,
      Schemas.AdjustedAreaHistory
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.AdjustedAreaHistory,
    GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetError,
    Schemas.AdjustedAreaHistory
  >(
    queryKeyFn({
      path: '/adjusted_area_history/property/{pk}/{date}',
      operationId: 'getAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGet',
      variables,
    }),
    () =>
      fetchGetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetPathParams =
  {
    complexPk: string;
  };

export type GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetResponse =
  Schemas.AdjustedAreaHistory[];

export type GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetVariables =
  {
    pathParams: GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGet =
  (
    variables: GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetVariables,
  ) =>
    yuppieFetch<
      GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetResponse,
      GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetError,
      undefined,
      {},
      {},
      GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetPathParams
    >({
      url: '/adjusted_area_history/complex/{complexPk}/all',
      method: 'get',
      ...variables,
    });

export const useGetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGet =
  (
    variables: GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetResponse,
        GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetError,
        GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetResponse
      >,
      'queryKey' | 'queryFn'
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useYuppieContext(options);
    return reactQuery.useQuery<
      GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetResponse,
      GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetError,
      GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetResponse
    >(
      queryKeyFn({
        path: '/adjusted_area_history/complex/{complex_pk}/all',
        operationId:
          'getAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGet',
        variables,
      }),
      () =>
        fetchGetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGet({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      },
    );
  };

export type GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetPathParams =
  {
    complexPk: string;
  };

export type GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetVariables =
  {
    pathParams: GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGet =
  (
    variables: GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetVariables,
  ) =>
    yuppieFetch<
      Schemas.AdjustedAreaHistory,
      GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetError,
      undefined,
      {},
      {},
      GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetPathParams
    >({
      url: '/adjusted_area_history/complex/{complexPk}/latest',
      method: 'get',
      ...variables,
    });

export const useGetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGet =
  (
    variables: GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.AdjustedAreaHistory,
        GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetError,
        Schemas.AdjustedAreaHistory
      >,
      'queryKey' | 'queryFn'
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useYuppieContext(options);
    return reactQuery.useQuery<
      Schemas.AdjustedAreaHistory,
      GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetError,
      Schemas.AdjustedAreaHistory
    >(
      queryKeyFn({
        path: '/adjusted_area_history/complex/{complex_pk}/latest',
        operationId:
          'getAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGet',
        variables,
      }),
      () =>
        fetchGetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGet({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      },
    );
  };

export type GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetPathParams =
  {
    complexPk: string;
    /*
     * @format date
     */
    date: string;
  };

export type GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetVariables =
  {
    pathParams: GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGet = (
  variables: GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetVariables,
) =>
  yuppieFetch<
    Schemas.AdjustedAreaHistory,
    GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetError,
    undefined,
    {},
    {},
    GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetPathParams
  >({
    url: '/adjusted_area_history/complex/{complexPk}/{date}',
    method: 'get',
    ...variables,
  });

export const useGetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGet = (
  variables: GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AdjustedAreaHistory,
      GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetError,
      Schemas.AdjustedAreaHistory
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    Schemas.AdjustedAreaHistory,
    GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetError,
    Schemas.AdjustedAreaHistory
  >(
    queryKeyFn({
      path: '/adjusted_area_history/complex/{complex_pk}/{date}',
      operationId: 'getAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGet',
      variables,
    }),
    () =>
      fetchGetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetArticleAllFinanceArticleComplexComplexPkAllGetPathParams = {
  complexPk: string;
};

export type GetArticleAllFinanceArticleComplexComplexPkAllGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetArticleAllFinanceArticleComplexComplexPkAllGetResponse =
  Schemas.NaverLand[];

export type GetArticleAllFinanceArticleComplexComplexPkAllGetVariables = {
  pathParams: GetArticleAllFinanceArticleComplexComplexPkAllGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetArticleAllFinanceArticleComplexComplexPkAllGet = (
  variables: GetArticleAllFinanceArticleComplexComplexPkAllGetVariables,
) =>
  yuppieFetch<
    GetArticleAllFinanceArticleComplexComplexPkAllGetResponse,
    GetArticleAllFinanceArticleComplexComplexPkAllGetError,
    undefined,
    {},
    {},
    GetArticleAllFinanceArticleComplexComplexPkAllGetPathParams
  >({
    url: '/finance/article/complex/{complexPk}/all',
    method: 'get',
    ...variables,
  });

export const useGetArticleAllFinanceArticleComplexComplexPkAllGet = (
  variables: GetArticleAllFinanceArticleComplexComplexPkAllGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetArticleAllFinanceArticleComplexComplexPkAllGetResponse,
      GetArticleAllFinanceArticleComplexComplexPkAllGetError,
      GetArticleAllFinanceArticleComplexComplexPkAllGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetArticleAllFinanceArticleComplexComplexPkAllGetResponse,
    GetArticleAllFinanceArticleComplexComplexPkAllGetError,
    GetArticleAllFinanceArticleComplexComplexPkAllGetResponse
  >(
    queryKeyFn({
      path: '/finance/article/complex/{complex_pk}/all',
      operationId: 'getArticleAllFinanceArticleComplexComplexPkAllGet',
      variables,
    }),
    () =>
      fetchGetArticleAllFinanceArticleComplexComplexPkAllGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetArticleFinanceArticleComplexComplexPkTradeTypeGetPathParams = {
  complexPk: string;
  tradeType: string;
};

export type GetArticleFinanceArticleComplexComplexPkTradeTypeGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetArticleFinanceArticleComplexComplexPkTradeTypeGetResponse =
  Schemas.NaverLand[];

export type GetArticleFinanceArticleComplexComplexPkTradeTypeGetVariables = {
  pathParams: GetArticleFinanceArticleComplexComplexPkTradeTypeGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetArticleFinanceArticleComplexComplexPkTradeTypeGet = (
  variables: GetArticleFinanceArticleComplexComplexPkTradeTypeGetVariables,
) =>
  yuppieFetch<
    GetArticleFinanceArticleComplexComplexPkTradeTypeGetResponse,
    GetArticleFinanceArticleComplexComplexPkTradeTypeGetError,
    undefined,
    {},
    {},
    GetArticleFinanceArticleComplexComplexPkTradeTypeGetPathParams
  >({
    url: '/finance/article/complex/{complexPk}/{tradeType}',
    method: 'get',
    ...variables,
  });

export const useGetArticleFinanceArticleComplexComplexPkTradeTypeGet = (
  variables: GetArticleFinanceArticleComplexComplexPkTradeTypeGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetArticleFinanceArticleComplexComplexPkTradeTypeGetResponse,
      GetArticleFinanceArticleComplexComplexPkTradeTypeGetError,
      GetArticleFinanceArticleComplexComplexPkTradeTypeGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetArticleFinanceArticleComplexComplexPkTradeTypeGetResponse,
    GetArticleFinanceArticleComplexComplexPkTradeTypeGetError,
    GetArticleFinanceArticleComplexComplexPkTradeTypeGetResponse
  >(
    queryKeyFn({
      path: '/finance/article/complex/{complex_pk}/{trade_type}',
      operationId: 'getArticleFinanceArticleComplexComplexPkTradeTypeGet',
      variables,
    }),
    () =>
      fetchGetArticleFinanceArticleComplexComplexPkTradeTypeGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetPathParams =
  {
    pk: string;
  };

export type GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetResponse =
  Schemas.NaverLand[];

export type GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetVariables = {
  pathParams: GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetArticleAllFromPropertyFinanceArticlePropertyPkAllGet = (
  variables: GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetVariables,
) =>
  yuppieFetch<
    GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetResponse,
    GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetError,
    undefined,
    {},
    {},
    GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetPathParams
  >({ url: '/finance/article/property/{pk}/all', method: 'get', ...variables });

export const useGetArticleAllFromPropertyFinanceArticlePropertyPkAllGet = (
  variables: GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetResponse,
      GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetError,
      GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetResponse,
    GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetError,
    GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetResponse
  >(
    queryKeyFn({
      path: '/finance/article/property/{pk}/all',
      operationId: 'getArticleAllFromPropertyFinanceArticlePropertyPkAllGet',
      variables,
    }),
    () =>
      fetchGetArticleAllFromPropertyFinanceArticlePropertyPkAllGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetPathParams =
  {
    pk: string;
    tradeType: string;
  };

export type GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetResponse =
  Schemas.NaverLand[];

export type GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetVariables =
  {
    pathParams: GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGet = (
  variables: GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetVariables,
) =>
  yuppieFetch<
    GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetResponse,
    GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetError,
    undefined,
    {},
    {},
    GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetPathParams
  >({
    url: '/finance/article/property/{pk}/{tradeType}',
    method: 'get',
    ...variables,
  });

export const useGetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGet = (
  variables: GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetResponse,
      GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetError,
      GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetResponse,
    GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetError,
    GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetResponse
  >(
    queryKeyFn({
      path: '/finance/article/property/{pk}/{trade_type}',
      operationId: 'getArticleFromPropertyFinanceArticlePropertyPkTradeTypeGet',
      variables,
    }),
    () =>
      fetchGetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPriceStatFinancePricestatComplexComplexPkGetPathParams = {
  complexPk: string;
};

export type GetPriceStatFinancePricestatComplexComplexPkGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetPriceStatFinancePricestatComplexComplexPkGetResponse =
  Schemas.NaverLandPrice[];

export type GetPriceStatFinancePricestatComplexComplexPkGetVariables = {
  pathParams: GetPriceStatFinancePricestatComplexComplexPkGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetPriceStatFinancePricestatComplexComplexPkGet = (
  variables: GetPriceStatFinancePricestatComplexComplexPkGetVariables,
) =>
  yuppieFetch<
    GetPriceStatFinancePricestatComplexComplexPkGetResponse,
    GetPriceStatFinancePricestatComplexComplexPkGetError,
    undefined,
    {},
    {},
    GetPriceStatFinancePricestatComplexComplexPkGetPathParams
  >({
    url: '/finance/pricestat/complex/{complexPk}',
    method: 'get',
    ...variables,
  });

export const useGetPriceStatFinancePricestatComplexComplexPkGet = (
  variables: GetPriceStatFinancePricestatComplexComplexPkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPriceStatFinancePricestatComplexComplexPkGetResponse,
      GetPriceStatFinancePricestatComplexComplexPkGetError,
      GetPriceStatFinancePricestatComplexComplexPkGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetPriceStatFinancePricestatComplexComplexPkGetResponse,
    GetPriceStatFinancePricestatComplexComplexPkGetError,
    GetPriceStatFinancePricestatComplexComplexPkGetResponse
  >(
    queryKeyFn({
      path: '/finance/pricestat/complex/{complex_pk}',
      operationId: 'getPriceStatFinancePricestatComplexComplexPkGet',
      variables,
    }),
    () =>
      fetchGetPriceStatFinancePricestatComplexComplexPkGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPriceStatFromPropertyFinancePricestatPropertyPkGetPathParams = {
  pk: string;
};

export type GetPriceStatFromPropertyFinancePricestatPropertyPkGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetPriceStatFromPropertyFinancePricestatPropertyPkGetResponse =
  Schemas.NaverLandPrice[];

export type GetPriceStatFromPropertyFinancePricestatPropertyPkGetVariables = {
  pathParams: GetPriceStatFromPropertyFinancePricestatPropertyPkGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetPriceStatFromPropertyFinancePricestatPropertyPkGet = (
  variables: GetPriceStatFromPropertyFinancePricestatPropertyPkGetVariables,
) =>
  yuppieFetch<
    GetPriceStatFromPropertyFinancePricestatPropertyPkGetResponse,
    GetPriceStatFromPropertyFinancePricestatPropertyPkGetError,
    undefined,
    {},
    {},
    GetPriceStatFromPropertyFinancePricestatPropertyPkGetPathParams
  >({ url: '/finance/pricestat/property/{pk}', method: 'get', ...variables });

export const useGetPriceStatFromPropertyFinancePricestatPropertyPkGet = (
  variables: GetPriceStatFromPropertyFinancePricestatPropertyPkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetPriceStatFromPropertyFinancePricestatPropertyPkGetResponse,
      GetPriceStatFromPropertyFinancePricestatPropertyPkGetError,
      GetPriceStatFromPropertyFinancePricestatPropertyPkGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetPriceStatFromPropertyFinancePricestatPropertyPkGetResponse,
    GetPriceStatFromPropertyFinancePricestatPropertyPkGetError,
    GetPriceStatFromPropertyFinancePricestatPropertyPkGetResponse
  >(
    queryKeyFn({
      path: '/finance/pricestat/property/{pk}',
      operationId: 'getPriceStatFromPropertyFinancePricestatPropertyPkGet',
      variables,
    }),
    () =>
      fetchGetPriceStatFromPropertyFinancePricestatPropertyPkGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetSpecListFinanceSpeclistPkGetPathParams = {
  pk: string;
};

export type GetSpecListFinanceSpeclistPkGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetSpecListFinanceSpeclistPkGetResponse = Schemas.SpecTuple[];

export type GetSpecListFinanceSpeclistPkGetVariables = {
  pathParams: GetSpecListFinanceSpeclistPkGetPathParams;
} & YuppieContext['fetcherOptions'];

export const fetchGetSpecListFinanceSpeclistPkGet = (
  variables: GetSpecListFinanceSpeclistPkGetVariables,
) =>
  yuppieFetch<
    GetSpecListFinanceSpeclistPkGetResponse,
    GetSpecListFinanceSpeclistPkGetError,
    undefined,
    {},
    {},
    GetSpecListFinanceSpeclistPkGetPathParams
  >({ url: '/finance/speclist/{pk}', method: 'get', ...variables });

export const useGetSpecListFinanceSpeclistPkGet = (
  variables: GetSpecListFinanceSpeclistPkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetSpecListFinanceSpeclistPkGetResponse,
      GetSpecListFinanceSpeclistPkGetError,
      GetSpecListFinanceSpeclistPkGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetSpecListFinanceSpeclistPkGetResponse,
    GetSpecListFinanceSpeclistPkGetError,
    GetSpecListFinanceSpeclistPkGetResponse
  >(
    queryKeyFn({
      path: '/finance/speclist/{pk}',
      operationId: 'getSpecListFinanceSpeclistPkGet',
      variables,
    }),
    () =>
      fetchGetSpecListFinanceSpeclistPkGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetPathParams =
  {
    pk: string;
  };

export type GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetVariables =
  {
    pathParams: GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetPriceStatFromPropertyFinanceConversionRatePropertyPkGet = (
  variables: GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetVariables,
) =>
  yuppieFetch<
    void,
    GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetError,
    undefined,
    {},
    {},
    GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetPathParams
  >({
    url: '/finance/conversion_rate/property/{pk}',
    method: 'get',
    ...variables,
  });

export const useGetPriceStatFromPropertyFinanceConversionRatePropertyPkGet = (
  variables: GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetError,
      void
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    void,
    GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetError,
    void
  >(
    queryKeyFn({
      path: '/finance/conversion_rate/property/{pk}',
      operationId: 'getPriceStatFromPropertyFinanceConversionRatePropertyPkGet',
      variables,
    }),
    () =>
      fetchGetPriceStatFromPropertyFinanceConversionRatePropertyPkGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetPathParams =
  {
    pk: string;
    area: number;
  };

export type GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetVariables =
  {
    pathParams: GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetPathParams;
  } & YuppieContext['fetcherOptions'];

export const fetchGetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGet =
  (
    variables: GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetVariables,
  ) =>
    yuppieFetch<
      void,
      GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetError,
      undefined,
      {},
      {},
      GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetPathParams
    >({
      url: '/finance/conversion_rate/property/{pk}/other/{area}',
      method: 'get',
      ...variables,
    });

export const useGetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGet =
  (
    variables: GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        void,
        GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetError,
        void
      >,
      'queryKey' | 'queryFn'
    >,
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useYuppieContext(options);
    return reactQuery.useQuery<
      void,
      GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetError,
      void
    >(
      queryKeyFn({
        path: '/finance/conversion_rate/property/{pk}/other/{area}',
        operationId:
          'getPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGet',
        variables,
      }),
      () =>
        fetchGetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGet(
          { ...fetcherOptions, ...variables },
        ),
      {
        ...options,
        ...queryOptions,
      },
    );
  };

export type GetDepositRatesFinanceDepositRatesGeneralGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetDepositRatesFinanceDepositRatesGeneralGetResponse =
  Schemas.DepositRate[];

export type GetDepositRatesFinanceDepositRatesGeneralGetVariables =
  YuppieContext['fetcherOptions'];

export const fetchGetDepositRatesFinanceDepositRatesGeneralGet = (
  variables: GetDepositRatesFinanceDepositRatesGeneralGetVariables,
) =>
  yuppieFetch<
    GetDepositRatesFinanceDepositRatesGeneralGetResponse,
    GetDepositRatesFinanceDepositRatesGeneralGetError,
    undefined,
    {},
    {},
    {}
  >({ url: '/finance/deposit_rates/general', method: 'get', ...variables });

export const useGetDepositRatesFinanceDepositRatesGeneralGet = (
  variables: GetDepositRatesFinanceDepositRatesGeneralGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetDepositRatesFinanceDepositRatesGeneralGetResponse,
      GetDepositRatesFinanceDepositRatesGeneralGetError,
      GetDepositRatesFinanceDepositRatesGeneralGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetDepositRatesFinanceDepositRatesGeneralGetResponse,
    GetDepositRatesFinanceDepositRatesGeneralGetError,
    GetDepositRatesFinanceDepositRatesGeneralGetResponse
  >(
    queryKeyFn({
      path: '/finance/deposit_rates/general',
      operationId: 'getDepositRatesFinanceDepositRatesGeneralGet',
      variables,
    }),
    () =>
      fetchGetDepositRatesFinanceDepositRatesGeneralGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetDepositRatesFinanceDepositRatesSavingGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetDepositRatesFinanceDepositRatesSavingGetResponse =
  Schemas.DepositRate[];

export type GetDepositRatesFinanceDepositRatesSavingGetVariables =
  YuppieContext['fetcherOptions'];

export const fetchGetDepositRatesFinanceDepositRatesSavingGet = (
  variables: GetDepositRatesFinanceDepositRatesSavingGetVariables,
) =>
  yuppieFetch<
    GetDepositRatesFinanceDepositRatesSavingGetResponse,
    GetDepositRatesFinanceDepositRatesSavingGetError,
    undefined,
    {},
    {},
    {}
  >({ url: '/finance/deposit_rates/saving', method: 'get', ...variables });

export const useGetDepositRatesFinanceDepositRatesSavingGet = (
  variables: GetDepositRatesFinanceDepositRatesSavingGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetDepositRatesFinanceDepositRatesSavingGetResponse,
      GetDepositRatesFinanceDepositRatesSavingGetError,
      GetDepositRatesFinanceDepositRatesSavingGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetDepositRatesFinanceDepositRatesSavingGetResponse,
    GetDepositRatesFinanceDepositRatesSavingGetError,
    GetDepositRatesFinanceDepositRatesSavingGetResponse
  >(
    queryKeyFn({
      path: '/finance/deposit_rates/saving',
      operationId: 'getDepositRatesFinanceDepositRatesSavingGet',
      variables,
    }),
    () =>
      fetchGetDepositRatesFinanceDepositRatesSavingGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetLoanRatesFinanceLoanRatesGeneralGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetLoanRatesFinanceLoanRatesGeneralGetResponse = Schemas.LoanRate[];

export type GetLoanRatesFinanceLoanRatesGeneralGetVariables =
  YuppieContext['fetcherOptions'];

export const fetchGetLoanRatesFinanceLoanRatesGeneralGet = (
  variables: GetLoanRatesFinanceLoanRatesGeneralGetVariables,
) =>
  yuppieFetch<
    GetLoanRatesFinanceLoanRatesGeneralGetResponse,
    GetLoanRatesFinanceLoanRatesGeneralGetError,
    undefined,
    {},
    {},
    {}
  >({ url: '/finance/loan_rates/general', method: 'get', ...variables });

export const useGetLoanRatesFinanceLoanRatesGeneralGet = (
  variables: GetLoanRatesFinanceLoanRatesGeneralGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetLoanRatesFinanceLoanRatesGeneralGetResponse,
      GetLoanRatesFinanceLoanRatesGeneralGetError,
      GetLoanRatesFinanceLoanRatesGeneralGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetLoanRatesFinanceLoanRatesGeneralGetResponse,
    GetLoanRatesFinanceLoanRatesGeneralGetError,
    GetLoanRatesFinanceLoanRatesGeneralGetResponse
  >(
    queryKeyFn({
      path: '/finance/loan_rates/general',
      operationId: 'getLoanRatesFinanceLoanRatesGeneralGet',
      variables,
    }),
    () =>
      fetchGetLoanRatesFinanceLoanRatesGeneralGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetLoanRatesFinanceLoanRatesSavingGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetLoanRatesFinanceLoanRatesSavingGetResponse = Schemas.LoanRate[];

export type GetLoanRatesFinanceLoanRatesSavingGetVariables =
  YuppieContext['fetcherOptions'];

export const fetchGetLoanRatesFinanceLoanRatesSavingGet = (
  variables: GetLoanRatesFinanceLoanRatesSavingGetVariables,
) =>
  yuppieFetch<
    GetLoanRatesFinanceLoanRatesSavingGetResponse,
    GetLoanRatesFinanceLoanRatesSavingGetError,
    undefined,
    {},
    {},
    {}
  >({ url: '/finance/loan_rates/saving', method: 'get', ...variables });

export const useGetLoanRatesFinanceLoanRatesSavingGet = (
  variables: GetLoanRatesFinanceLoanRatesSavingGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetLoanRatesFinanceLoanRatesSavingGetResponse,
      GetLoanRatesFinanceLoanRatesSavingGetError,
      GetLoanRatesFinanceLoanRatesSavingGetResponse
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    GetLoanRatesFinanceLoanRatesSavingGetResponse,
    GetLoanRatesFinanceLoanRatesSavingGetError,
    GetLoanRatesFinanceLoanRatesSavingGetResponse
  >(
    queryKeyFn({
      path: '/finance/loan_rates/saving',
      operationId: 'getLoanRatesFinanceLoanRatesSavingGet',
      variables,
    }),
    () =>
      fetchGetLoanRatesFinanceLoanRatesSavingGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetMortgageRegulationFinanceMortgageRegulationPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetMortgageRegulationFinanceMortgageRegulationPostVariables = {
  body: Schemas.MortgageCondition;
} & YuppieContext['fetcherOptions'];

export const fetchGetMortgageRegulationFinanceMortgageRegulationPost = (
  variables: GetMortgageRegulationFinanceMortgageRegulationPostVariables,
) =>
  yuppieFetch<
    void,
    GetMortgageRegulationFinanceMortgageRegulationPostError,
    Schemas.MortgageCondition,
    {},
    {},
    {}
  >({ url: '/finance/mortgage_regulation', method: 'post', ...variables });

export const useGetMortgageRegulationFinanceMortgageRegulationPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      GetMortgageRegulationFinanceMortgageRegulationPostError,
      GetMortgageRegulationFinanceMortgageRegulationPostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useYuppieContext();
  return reactQuery.useMutation<
    void,
    GetMortgageRegulationFinanceMortgageRegulationPostError,
    GetMortgageRegulationFinanceMortgageRegulationPostVariables
  >(
    (variables: GetMortgageRegulationFinanceMortgageRegulationPostVariables) =>
      fetchGetMortgageRegulationFinanceMortgageRegulationPost({
        ...fetcherOptions,
        ...variables,
      }),
    options,
  );
};

export type IndexGetError = Fetcher.ErrorWrapper<undefined>;

export type IndexGetVariables = YuppieContext['fetcherOptions'];

export const fetchIndexGet = (variables: IndexGetVariables) =>
  yuppieFetch<void, IndexGetError, undefined, {}, {}, {}>({
    url: '/',
    method: 'get',
    ...variables,
  });

export const useIndexGet = (
  variables: IndexGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, IndexGetError, void>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<void, IndexGetError, void>(
    queryKeyFn({ path: '/', operationId: 'indexGet', variables }),
    () => fetchIndexGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type IndexVersionGetError = Fetcher.ErrorWrapper<undefined>;

export type IndexVersionGetVariables = YuppieContext['fetcherOptions'];

export const fetchIndexVersionGet = (variables: IndexVersionGetVariables) =>
  yuppieFetch<void, IndexVersionGetError, undefined, {}, {}, {}>({
    url: '/version',
    method: 'get',
    ...variables,
  });

export const useIndexVersionGet = (
  variables: IndexVersionGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, IndexVersionGetError, void>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<void, IndexVersionGetError, void>(
    queryKeyFn({ path: '/version', operationId: 'indexVersionGet', variables }),
    () => fetchIndexVersionGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ReadItemTermsGetError = Fetcher.ErrorWrapper<undefined>;

export type ReadItemTermsGetVariables = YuppieContext['fetcherOptions'];

export const fetchReadItemTermsGet = (variables: ReadItemTermsGetVariables) =>
  yuppieFetch<undefined, ReadItemTermsGetError, undefined, {}, {}, {}>({
    url: '/terms',
    method: 'get',
    ...variables,
  });

export const useReadItemTermsGet = (
  variables: ReadItemTermsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ReadItemTermsGetError, undefined>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<undefined, ReadItemTermsGetError, undefined>(
    queryKeyFn({ path: '/terms', operationId: 'readItemTermsGet', variables }),
    () => fetchReadItemTermsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ReadItemPrivacyGetError = Fetcher.ErrorWrapper<undefined>;

export type ReadItemPrivacyGetVariables = YuppieContext['fetcherOptions'];

export const fetchReadItemPrivacyGet = (
  variables: ReadItemPrivacyGetVariables,
) =>
  yuppieFetch<undefined, ReadItemPrivacyGetError, undefined, {}, {}, {}>({
    url: '/privacy',
    method: 'get',
    ...variables,
  });

export const useReadItemPrivacyGet = (
  variables: ReadItemPrivacyGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ReadItemPrivacyGetError, undefined>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<undefined, ReadItemPrivacyGetError, undefined>(
    queryKeyFn({
      path: '/privacy',
      operationId: 'readItemPrivacyGet',
      variables,
    }),
    () => fetchReadItemPrivacyGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetNoticesNoticesGetError = Fetcher.ErrorWrapper<undefined>;

export type GetNoticesNoticesGetVariables = YuppieContext['fetcherOptions'];

export const fetchGetNoticesNoticesGet = (
  variables: GetNoticesNoticesGetVariables,
) =>
  yuppieFetch<void, GetNoticesNoticesGetError, undefined, {}, {}, {}>({
    url: '/notices',
    method: 'get',
    ...variables,
  });

export const useGetNoticesNoticesGet = (
  variables: GetNoticesNoticesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, GetNoticesNoticesGetError, void>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<void, GetNoticesNoticesGetError, void>(
    queryKeyFn({
      path: '/notices',
      operationId: 'getNoticesNoticesGet',
      variables,
    }),
    () => fetchGetNoticesNoticesGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetManualsManualsGetError = Fetcher.ErrorWrapper<undefined>;

export type GetManualsManualsGetVariables = YuppieContext['fetcherOptions'];

export const fetchGetManualsManualsGet = (
  variables: GetManualsManualsGetVariables,
) =>
  yuppieFetch<void, GetManualsManualsGetError, undefined, {}, {}, {}>({
    url: '/manuals',
    method: 'get',
    ...variables,
  });

export const useGetManualsManualsGet = (
  variables: GetManualsManualsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, GetManualsManualsGetError, void>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<void, GetManualsManualsGetError, void>(
    queryKeyFn({
      path: '/manuals',
      operationId: 'getManualsManualsGet',
      variables,
    }),
    () => fetchGetManualsManualsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type GetManualsFaqsGetError = Fetcher.ErrorWrapper<undefined>;

export type GetManualsFaqsGetVariables = YuppieContext['fetcherOptions'];

export const fetchGetManualsFaqsGet = (variables: GetManualsFaqsGetVariables) =>
  yuppieFetch<void, GetManualsFaqsGetError, undefined, {}, {}, {}>({
    url: '/faqs',
    method: 'get',
    ...variables,
  });

export const useGetManualsFaqsGet = (
  variables: GetManualsFaqsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, GetManualsFaqsGetError, void>,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<void, GetManualsFaqsGetError, void>(
    queryKeyFn({ path: '/faqs', operationId: 'getManualsFaqsGet', variables }),
    () => fetchGetManualsFaqsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ApartmentsSearchApartmentsSearchGetQueryParams = {
  q: string;
};

export type ApartmentsSearchApartmentsSearchGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type ApartmentsSearchApartmentsSearchGetVariables = {
  queryParams: ApartmentsSearchApartmentsSearchGetQueryParams;
} & YuppieContext['fetcherOptions'];

export const fetchApartmentsSearchApartmentsSearchGet = (
  variables: ApartmentsSearchApartmentsSearchGetVariables,
) =>
  yuppieFetch<
    void,
    ApartmentsSearchApartmentsSearchGetError,
    undefined,
    {},
    ApartmentsSearchApartmentsSearchGetQueryParams,
    {}
  >({ url: '/apartments/search', method: 'get', ...variables });

export const useApartmentsSearchApartmentsSearchGet = (
  variables: ApartmentsSearchApartmentsSearchGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      ApartmentsSearchApartmentsSearchGetError,
      void
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useYuppieContext(options);
  return reactQuery.useQuery<
    void,
    ApartmentsSearchApartmentsSearchGetError,
    void
  >(
    queryKeyFn({
      path: '/apartments/search',
      operationId: 'apartmentsSearchApartmentsSearchGet',
      variables,
    }),
    () =>
      fetchApartmentsSearchApartmentsSearchGet({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type QueryOperation =
  | {
      path: '/universes/none/property/random';
      operationId: 'getPropertyUniversesNonePropertyRandomGet';
      variables: GetPropertyUniversesNonePropertyRandomGetVariables;
    }
  | {
      path: '/universes/none/property/{pk}';
      operationId: 'getPropertyUniversesNonePropertyPkGet';
      variables: GetPropertyUniversesNonePropertyPkGetVariables;
    }
  | {
      path: '/universes/{id}/properties';
      operationId: 'getPropertiesUniversesIdPropertiesGet';
      variables: GetPropertiesUniversesIdPropertiesGetVariables;
    }
  | {
      path: '/apartments/{key}/dongs';
      operationId: 'queryDongsApartmentsKeyDongsGet';
      variables: QueryDongsApartmentsKeyDongsGetVariables;
    }
  | {
      path: '/apartments/{key}/areas';
      operationId: 'queryDongsApartmentsKeyAreasGet';
      variables: QueryDongsApartmentsKeyAreasGetVariables;
    }
  | {
      path: '/apartments/{key}/hos';
      operationId: 'queryHosApartmentsKeyHosGet';
      variables: QueryHosApartmentsKeyHosGetVariables;
    }
  | {
      path: '/apartments/{key}/{area}/hos';
      operationId: 'queryAllHosApartmentsKeyAreaHosGet';
      variables: QueryAllHosApartmentsKeyAreaHosGetVariables;
    }
  | {
      path: '/official_price/{pk}';
      operationId: 'getOfficialPriceOfficialPricePkGet';
      variables: GetOfficialPriceOfficialPricePkGetVariables;
    }
  | {
      path: '/official_price/{pk}/latest';
      operationId: 'getOfficialPriceOfficialPricePkLatestGet';
      variables: GetOfficialPriceOfficialPricePkLatestGetVariables;
    }
  | {
      path: '/trade_history/{pk}';
      operationId: 'getTradeHistoryTradeHistoryPkGet';
      variables: GetTradeHistoryTradeHistoryPkGetVariables;
    }
  | {
      path: '/adjusted_area_history/property/{pk}/all';
      operationId: 'getAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGet';
      variables: GetAdjustedAreaHistoryPropAdjustedAreaHistoryPropertyPkAllGetVariables;
    }
  | {
      path: '/adjusted_area_history/property/{pk}/latest';
      operationId: 'getAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGet';
      variables: GetAdjustedAreaLatestPropAdjustedAreaHistoryPropertyPkLatestGetVariables;
    }
  | {
      path: '/adjusted_area_history/property/{pk}/{date}';
      operationId: 'getAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGet';
      variables: GetAdjustedAreaPropAdjustedAreaHistoryPropertyPkDateGetVariables;
    }
  | {
      path: '/adjusted_area_history/complex/{complex_pk}/all';
      operationId: 'getAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGet';
      variables: GetAdjustedAreaHistoryAdjustedAreaHistoryComplexComplexPkAllGetVariables;
    }
  | {
      path: '/adjusted_area_history/complex/{complex_pk}/latest';
      operationId: 'getAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGet';
      variables: GetAdjustedAreaLatestAdjustedAreaHistoryComplexComplexPkLatestGetVariables;
    }
  | {
      path: '/adjusted_area_history/complex/{complex_pk}/{date}';
      operationId: 'getAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGet';
      variables: GetAdjustedAreaAdjustedAreaHistoryComplexComplexPkDateGetVariables;
    }
  | {
      path: '/finance/article/complex/{complex_pk}/all';
      operationId: 'getArticleAllFinanceArticleComplexComplexPkAllGet';
      variables: GetArticleAllFinanceArticleComplexComplexPkAllGetVariables;
    }
  | {
      path: '/finance/article/complex/{complex_pk}/{trade_type}';
      operationId: 'getArticleFinanceArticleComplexComplexPkTradeTypeGet';
      variables: GetArticleFinanceArticleComplexComplexPkTradeTypeGetVariables;
    }
  | {
      path: '/finance/article/property/{pk}/all';
      operationId: 'getArticleAllFromPropertyFinanceArticlePropertyPkAllGet';
      variables: GetArticleAllFromPropertyFinanceArticlePropertyPkAllGetVariables;
    }
  | {
      path: '/finance/article/property/{pk}/{trade_type}';
      operationId: 'getArticleFromPropertyFinanceArticlePropertyPkTradeTypeGet';
      variables: GetArticleFromPropertyFinanceArticlePropertyPkTradeTypeGetVariables;
    }
  | {
      path: '/finance/pricestat/complex/{complex_pk}';
      operationId: 'getPriceStatFinancePricestatComplexComplexPkGet';
      variables: GetPriceStatFinancePricestatComplexComplexPkGetVariables;
    }
  | {
      path: '/finance/pricestat/property/{pk}';
      operationId: 'getPriceStatFromPropertyFinancePricestatPropertyPkGet';
      variables: GetPriceStatFromPropertyFinancePricestatPropertyPkGetVariables;
    }
  | {
      path: '/finance/speclist/{pk}';
      operationId: 'getSpecListFinanceSpeclistPkGet';
      variables: GetSpecListFinanceSpeclistPkGetVariables;
    }
  | {
      path: '/finance/conversion_rate/property/{pk}';
      operationId: 'getPriceStatFromPropertyFinanceConversionRatePropertyPkGet';
      variables: GetPriceStatFromPropertyFinanceConversionRatePropertyPkGetVariables;
    }
  | {
      path: '/finance/conversion_rate/property/{pk}/other/{area}';
      operationId: 'getPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGet';
      variables: GetPriceStatFromPropertyOtherFinanceConversionRatePropertyPkOtherAreaGetVariables;
    }
  | {
      path: '/finance/deposit_rates/general';
      operationId: 'getDepositRatesFinanceDepositRatesGeneralGet';
      variables: GetDepositRatesFinanceDepositRatesGeneralGetVariables;
    }
  | {
      path: '/finance/deposit_rates/saving';
      operationId: 'getDepositRatesFinanceDepositRatesSavingGet';
      variables: GetDepositRatesFinanceDepositRatesSavingGetVariables;
    }
  | {
      path: '/finance/loan_rates/general';
      operationId: 'getLoanRatesFinanceLoanRatesGeneralGet';
      variables: GetLoanRatesFinanceLoanRatesGeneralGetVariables;
    }
  | {
      path: '/finance/loan_rates/saving';
      operationId: 'getLoanRatesFinanceLoanRatesSavingGet';
      variables: GetLoanRatesFinanceLoanRatesSavingGetVariables;
    }
  | {
      path: '/';
      operationId: 'indexGet';
      variables: IndexGetVariables;
    }
  | {
      path: '/version';
      operationId: 'indexVersionGet';
      variables: IndexVersionGetVariables;
    }
  | {
      path: '/terms';
      operationId: 'readItemTermsGet';
      variables: ReadItemTermsGetVariables;
    }
  | {
      path: '/privacy';
      operationId: 'readItemPrivacyGet';
      variables: ReadItemPrivacyGetVariables;
    }
  | {
      path: '/notices';
      operationId: 'getNoticesNoticesGet';
      variables: GetNoticesNoticesGetVariables;
    }
  | {
      path: '/manuals';
      operationId: 'getManualsManualsGet';
      variables: GetManualsManualsGetVariables;
    }
  | {
      path: '/faqs';
      operationId: 'getManualsFaqsGet';
      variables: GetManualsFaqsGetVariables;
    }
  | {
      path: '/apartments/search';
      operationId: 'apartmentsSearchApartmentsSearchGet';
      variables: ApartmentsSearchApartmentsSearchGetVariables;
    }
  | {
      path: '/mvp/kr/am_i_tmp_2houses_owner';
      operationId: 'amITmp2housesOwnerMvpKrAmITmp2housesOwnerPost';
      variables: AmITmp2housesOwnerMvpKrAmITmp2housesOwnerPostVariables;
    };
