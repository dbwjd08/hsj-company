/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
export type AdjustedAreaHistory = {
  old_addr_idx: string;
  /*
   * @format date
   */
  reference_date: string;
  should_adjust?: number;
};

export type AppleSignInRequest = {
  authorizationCode: string;
  applePlatform: boolean;
};

export type Complex = {
  key: string;
  complex_name?: string;
  property_type: string;
  road_name?: string;
  road_code?: string;
  admin_dong_code?: string;
  postal_code?: string;
  /*
   * @format date
   */
  updated: string;
  old_address?: string;
};

export type ComplexAreaTypes = {
  area_types?: any[];
};

export type ComplexDongs = {
  dongs?: any[];
};

export type DepositRate = {
  bank_name: string;
  bank_type: string;
  product_name: string;
  interest_rate_12: number;
  /*
   * @format date
   */
  disclosure: string;
  limitation: string;
  /*
   * @format date
   */
  updated: string;
};

export type FcmTokenCreate = {
  token: string;
};

export type FcmTokenDelete = {
  token: string;
};

export type FcmTokenUpdate = {
  token: string;
  prev_token?: string;
};

export type FirebaseLoginRequest = {
  idToken: string;
};

export type GoogleSignInRequest = {
  idToken: string;
};

export type HTTPValidationError = {
  detail?: ValidationError[];
};

export type KakaoLoginRequest = {
  accessToken: string;
  refreshToken: string;
};

export type LoanRate = {
  bank_name: string;
  bank_type: string;
  cb_1000?: number;
  cb_950?: number;
  cb_900?: number;
  cb_850?: number;
  cb_800?: number;
  cb_750?: number;
  cb_700?: number;
  cb_650?: number;
  cb_600?: number;
  cb_avg?: number;
  avg_creadit?: number;
  cb_company?: string;
  rate_min?: number;
  rate_max?: number;
  ltv_desc?: string;
  ltv_max?: number;
  /*
   * @format date
   */
  updated: string;
};

export type LoginResponse = {
  access_token: string;
  terms_agreed: boolean;
  user: User;
  default_universe_id?: number;
  username?: string;
  session_id: string;
};

export type MortgageCondition = {
  sessionId: string;
  house: ServerSchemasRequestsKoreanProperty;
  value: number;
  numHouses: number;
};

export type NaverLand = {
  sidoCortarNo: string;
  sidoCortarNm: string;
  sigunguCortarNo: string;
  sigunguCortarNm: string;
  emdCortarNo: string;
  emdCortarNm: string;
  hscpNo: string;
  hscpNm: string;
  /*
   * @format date
   */
  updated: string;
  hscpTypeCd: string;
  hscpTypeNm: string;
  atclNo: string;
  prcInfo: string;
  repImgUrl?: string;
  atclNm: string;
  bildNm: string;
  tradTpCd: string;
  tradTpNm: string;
  rletTpCd: string;
  rletTpNm: string;
  spc1?: string;
  spc2?: string;
  flrInfo?: string;
  atclFetrDesc?: string;
  cfmYmd?: string;
  sameAddrCnt?: number;
  sameAddrDirectCnt?: number;
  sameAddrHash?: string;
  sameAddrMaxPrc?: string;
  sameAddrMinPrc?: string;
  cpid?: string;
  cpNm?: string;
  rltrNm?: string;
  direction?: string;
};

export type NaverLandPrice = {
  sidoCortarNo: string;
  sidoCortarNm: string;
  sigunguCortarNo: string;
  sigunguCortarNm: string;
  emdCortarNo: string;
  emdCortarNm: string;
  hscpNo: string;
  hscpNm: string;
  /*
   * @format date
   */
  updated: string;
  ptpNo: number;
  ptpNm: string;
  bssYmdFmtRent?: string;
  deposit?: number;
  monthlyRentMin?: number;
  monthlyRentMax?: number;
  bssYmdFmtStat?: string;
  dealUplmtPrc?: number;
  dealAvgPrc?: number;
  dealLwlmtPrc?: number;
  leaseUplmtPrc?: number;
  leaseAvgPrc?: number;
  leaseLwlmtPrc?: number;
};

export type OfficialPrice = {
  property_key: string;
  reference_year: number;
  price: number;
};

export type OfficialPriceUpdate = {
  property_key: string;
  reference_year: number;
  price: number;
};

export type Property = {
  pk: string;
  ho?: string;
  dong?: string;
  official_price?: number;
  net_leasable_area?: number;
  /*
   * @format date
   */
  updated: string;
  complex: Complex;
};

export type PropertyHo = {
  apart_pk: string;
  ho?: string;
  dong?: string;
  official_price?: number;
  net_leasable_area?: number;
  /*
   * @format date
   */
  updated: string;
};

export type PropertyHos = {
  items?: PropertyHo[];
};

export type PropertyOfficialPriceUpdate = {
  pk: string;
  official_price: number;
};

export type PropertyOwnership = {
  share?: number;
  ownership?: string;
  kind_of?: string;
  living_years?: number;
  acquired_price?: number;
  /*
   * @format date
   */
  acquisition_date?: string;
  /*
   * @format date
   */
  moving_in_date?: string;
  still_living?: boolean;
  universe_id: number;
  property: Property;
};

export type PropertyOwnershipCreate = {
  share?: number;
  ownership?: string;
  kindOf?: string;
  livingYears?: number;
  acqPrice?: number;
  /*
   * @format date
   */
  acquisitionDateTime?: string;
  /*
   * @format date
   */
  movingInDateTime?: string;
  isStillLiving?: boolean;
  sessionId?: string;
  pk: string;
};

export type PropertyOwnershipDelete = {
  sessionId?: string;
};

export type PropertyOwnershipUpdate = {
  share?: number;
  ownership?: string;
  kindOf?: string;
  livingYears?: number;
  acqPrice?: number;
  /*
   * @format date
   */
  acquisitionDateTime?: string;
  /*
   * @format date
   */
  movingInDateTime?: string;
  isStillLiving?: boolean;
  sessionId?: string;
};

export type SpecTuple = {
  hscpNo: string;
  spc1: string;
  spc2: string;
};

export type TermsAgreement = {
  version: string;
};

export type TermsAgreementCreate = {
  version: string;
  sessionId?: string;
};

export type TradeHistory = {
  old_addr_idx: string;
  /*
   * @format date
   */
  reference_date: string;
  price?: number;
  net_leasable_area?: number;
  floor?: number;
};

export type User = {
  username?: string;
  name?: string;
  email?: string;
  default_universe_id?: number;
  age_range?: string;
  alarm_on?: boolean;
};

export type UserDelete = {
  username?: string;
};

export type UserUpdate = {
  username?: string;
  name?: string;
  email?: string;
  defaultUniverseId?: number;
  age?: string;
  isAlarmOn?: boolean;
};

export type ValidationError = {
  loc: string[];
  msg: string;
  type: string;
};

export type ServerSchemasRequestsAmI1HouseholderBeneficial = {
  sessionId?: string;
  house: ServerSchemasRequestsKoreanProperty;
};

export type ServerSchemasRequestsAmITemp2Request = {
  sessionId?: string;
  myProperties: ServerSchemasRequestsKoreanProperty[];
};

export type ServerSchemasRequestsAnalyzePropertyCapitalGainsTaxRequest = {
  sessionId?: string;
  myProperties: ServerSchemasRequestsKoreanProperty[];
  isTmp2housesOwner: boolean;
};

export type ServerSchemasRequestsCalculateKrPropertyAcquisitionTaxRequest = {
  sessionId: string;
  acquisitionKoreanProperty: ServerSchemasRequestsKoreanProperty;
  causeOfAcquisition: string;
  alreadyOwnedKoreanProperties: ServerSchemasRequestsKoreanProperty[];
  isTmp2housesOwner: boolean;
  isOneHousePerHousehold?: boolean;
};

export type ServerSchemasRequestsCalculateKrTaxRequest = {
  sessionId: string;
  taxYear: number;
  koreanProperties: ServerSchemasRequestsKoreanProperty[];
  name?: string;
  personOrLegal?: string;
  age?: string;
};

export type ServerSchemasRequestsCapitalGainsTaxRequestForDefault = {
  sessionId: string;
  sellingHouse: ServerSchemasRequestsKoreanProperty;
  numOfHousesSellerHas: number;
  isTmp2housesOwner?: boolean;
  expectationSellingPrice?: number;
  sellingDatetime?: string;
};

export type ServerSchemasRequestsCapitalGainsTaxRequestForTmp2HousesOwnerSellOld =
  {
    sessionId: string;
    oldHouse: ServerSchemasRequestsKoreanProperty;
    newHouse: ServerSchemasRequestsKoreanProperty;
    expectationSellingPrice?: number;
    sellingDatetime?: string;
  };

export type ServerSchemasRequestsInferFutureKrTaxMaintenanceRequest = {
  sessionId: string;
  taxYear: number;
  koreanProperties: ServerSchemasRequestsKoreanProperty[];
  name?: string;
  personOrLegal?: string;
  age?: string;
};

export type ServerSchemasRequestsKoreanProperty = {
  pk: string;
  complex?: string;
  dong?: string;
  ho?: string;
  kindOf: string;
  share: number;
  netLeasableArea: number;
  ownershipType: string;
  officialPrice: number;
  movingInDate?: string;
  livingYears?: number;
  stillLiving?: boolean;
  acquisitionDatetime?: string;
  acquisitionPrice?: number;
  acquisitionType?: string;
  contractDatetime?: string;
};

export type ServerSchemasRequestsNeedWinWinPartnership = {
  sessionId: string;
  myProperties: ServerSchemasRequestsKoreanProperty[];
};

export type ServerSchemasRequestsToLiveOrNotToLive = {
  sessionId: string;
  sellingHouse: ServerSchemasRequestsKoreanProperty;
  capitalGainsTaxChartType: string;
  amI_1householderTaxExempted: boolean;
  amI_specialDeductionForLongtermHolder: boolean;
  sellingPrice?: number;
  estimatedMovedInDatetime?: string;
};

export type ServerSchemasRequestsLatestAmI1HouseholderBeneficial = {
  sessionId?: string;
  house: ServerSchemasRequestsLatestKoreanProperty;
};

export type ServerSchemasRequestsLatestAmITemp2Request = {
  sessionId?: string;
  myProperties: ServerSchemasRequestsLatestKoreanProperty[];
};

export type ServerSchemasRequestsLatestAnalyzePropertyCapitalGainsTaxRequest = {
  sessionId?: string;
  myProperties: ServerSchemasRequestsLatestKoreanProperty[];
  isTmp2housesOwner: boolean;
};

export type ServerSchemasRequestsLatestCalculateKrPropertyAcquisitionTaxRequest =
  {
    sessionId: string;
    acquisitionKoreanProperty: ServerSchemasRequestsLatestKoreanProperty;
    causeOfAcquisition: string;
    alreadyOwnedKoreanProperties: ServerSchemasRequestsLatestKoreanProperty[];
    isTmp2housesOwner: boolean;
    isOneHousePerHousehold?: boolean;
  };

export type ServerSchemasRequestsLatestCalculateKrTaxRequest = {
  sessionId: string;
  taxYear: number;
  koreanProperties: ServerSchemasRequestsLatestKoreanProperty[];
  name?: string;
  personOrLegal?: string;
  age?: string;
};

export type ServerSchemasRequestsLatestCapitalGainsTaxRequestForDefault = {
  sessionId: string;
  sellingHouse: ServerSchemasRequestsLatestKoreanProperty;
  numOfHousesSellerHas: number;
  isTmp2housesOwner?: boolean;
  expectationSellingPrice?: number;
  sellingDatetime?: string;
};

export type ServerSchemasRequestsLatestCapitalGainsTaxRequestForTmp2HousesOwnerSellOld =
  {
    sessionId: string;
    oldHouse: ServerSchemasRequestsLatestKoreanProperty;
    newHouse: ServerSchemasRequestsLatestKoreanProperty;
    expectationSellingPrice?: number;
    sellingDatetime?: string;
  };

export type ServerSchemasRequestsLatestInferFutureKrTaxMaintenanceRequest = {
  sessionId: string;
  taxYear: number;
  koreanProperties: ServerSchemasRequestsLatestKoreanProperty[];
  name?: string;
  personOrLegal?: string;
  age?: string;
};

export type ServerSchemasRequestsLatestKoreanProperty = {
  pk: string;
  complex?: string;
  dong?: string;
  ho?: string;
  kindOf: string;
  share: number;
  netLeasableArea: number;
  ownershipType: string;
  officialPrice: number;
  movingInDate?: string;
  livingYears?: number;
  stillLiving?: boolean;
  acquisitionDatetime?: string;
  acquisitionPrice?: number;
  acquisitionType?: string;
  contractDatetime?: string;
};

export type ServerSchemasRequestsLatestNeedWinWinPartnership = {
  sessionId: string;
  myProperties: ServerSchemasRequestsLatestKoreanProperty[];
};

export type ServerSchemasRequestsLatestToLiveOrNotToLive = {
  sessionId: string;
  sellingHouse: ServerSchemasRequestsLatestKoreanProperty;
  capitalGainsTaxChartType: string;
  amI_1householderTaxExempted: boolean;
  amI_specialDeductionForLongtermHolder: boolean;
  sellingPrice?: number;
  estimatedMovedInDatetime?: string;
};
